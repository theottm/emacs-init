(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ac-auto-show-menu 0.5)
 '(ac-trigger-key "TAB")
 '(ac-use-fuzzy t)
 '(ansi-color-names-vector
   ["#2d3743" "#ff4242" "#74af68" "#dbdb95" "#34cae2" "#008b8b" "#00ede1" "#e1e1e0"])
 '(async-bytecomp-allowed-packages (quote (all)))
 '(async-bytecomp-package-mode t)
 '(avy-all-windows-alt (quote all-frames))
 '(avy-background t)
 '(avy-dispatch-alist
   (quote
    ((122 . avy-action-kill)
     (101 . avy-action-mark)
     (97 . avy-action-copy))))
 '(avy-keys (quote (113 115 119 120 99 100 118 107 108 109)))
 '(avy-style (quote at))
 '(beacon-blink-delay 0)
 '(beacon-blink-duration 0.2)
 '(beacon-blink-when-focused t)
 '(beacon-blink-when-point-moves-horizontally nil)
 '(beacon-blink-when-point-moves-vertically 30)
 '(beacon-color "medium blue")
 '(beacon-mode t)
 '(beacon-size 200)
 '(bmkp-last-as-first-bookmark-file "~/.emacs.d/bookmarks")
 '(bmkp-prompt-for-tags-flag t)
 '(bmkp-properties-to-keep (quote (tags annotation visits time created)))
 '(bookmark-save-flag 0)
 '(bookmark-version-control t)
 '(browse-url-conkeror-new-window-is-buffer nil)
 '(calendar-christian-all-holidays-flag t)
 '(calendar-holidays
   (quote
    ((holiday-fixed 1 1 "New Year's Day")
     (holiday-fixed 2 14 "Valentine's Day")
     (holiday-float 5 0 2 "Mother's Day")
     (holiday-fixed 7 4 "Independence Day")
     (holiday-fixed 10 31 "Halloween")
     (holiday-easter-etc)
     (holiday-fixed 12 25 "Christmas")
     (if calendar-christian-all-holidays-flag
         (append
          (holiday-fixed 1 6 "Epiphany")
          (holiday-julian 12 25 "Christmas (Julian calendar)")
          (holiday-greek-orthodox-easter)
          (holiday-fixed 8 15 "Assumption")
          (holiday-advent 0 "Advent")))
     (holiday-hebrew-passover)
     (holiday-hebrew-rosh-hashanah)
     (holiday-hebrew-hanukkah)
     (if calendar-hebrew-all-holidays-flag
         (append
          (holiday-hebrew-tisha-b-av)
          (holiday-hebrew-misc)))
     (holiday-islamic-new-year)
     (holiday-islamic 9 1 "Ramadan Begins")
     (if calendar-islamic-all-holidays-flag
         (append
          (holiday-islamic 1 10 "Ashura")
          (holiday-islamic 3 12 "Mulad-al-Nabi")
          (holiday-islamic 7 26 "Shab-e-Mi'raj")
          (holiday-islamic 8 15 "Shab-e-Bara't")
          (holiday-islamic 9 27 "Shab-e Qadr")
          (holiday-islamic 10 1 "Id-al-Fitr")
          (holiday-islamic 12 10 "Id-al-Adha")))
     (holiday-bahai-new-year)
     (holiday-bahai-ridvan)
     (holiday-fixed 5 23 "Declaration of the Báb")
     (holiday-fixed 5 29 "Ascension of Bahá’u’lláh")
     (holiday-fixed 7 9 "Martyrdom of the Báb")
     (holiday-fixed 10 20 "Birth of the Báb")
     (holiday-fixed 11 12 "Birth of Bahá’u’lláh")
     (if calendar-bahai-all-holidays-flag
         (append
          (holiday-fixed 11 26 "Day of the Covenant")
          (holiday-fixed 11 28 "Ascension of `Abdu’l-Bahá")))
     (holiday-chinese-new-year)
     (if calendar-chinese-all-holidays-flag
         (append
          (holiday-chinese 1 15 "Lantern Festival")
          (holiday-chinese-qingming)
          (holiday-chinese 5 5 "Dragon Boat Festival")
          (holiday-chinese 7 7 "Double Seventh Festival")
          (holiday-chinese 8 15 "Mid-Autumn Festival")
          (holiday-chinese 9 9 "Double Ninth Festival")
          (holiday-chinese-winter-solstice)))
     (solar-equinoxes-solstices)
     (holiday-sexp calendar-daylight-savings-starts
                   (format "Daylight Saving Time Begins %s"
                           (solar-time-string
                            (/ calendar-daylight-savings-starts-time
                               (float 60))
                            calendar-standard-time-zone-name)))
     (holiday-sexp calendar-daylight-savings-ends
                   (format "Daylight Saving Time Ends %s"
                           (solar-time-string
                            (/ calendar-daylight-savings-ends-time
                               (float 60))
                            calendar-daylight-time-zone-name))))) t)
 '(calendar-mark-holidays-flag nil)
 '(calendar-view-holidays-initially-flag nil)
 '(calendar-week-start-day 1)
 '(column-number-mode t)
 '(company-minimum-prefix-length 2)
 '(confirm-kill-processes nil)
 '(custom-enabled-themes (quote (mystery)))
 '(custom-safe-themes
   (quote
    ("2231539e6d4d2a4d6b6121e3128813c64bd0a94ff1249c4510d7b357c9565ba8" "ab04c00a7e48ad784b52f34aa6bfa1e80d0c3fcacc50e1189af3651013eb0d58" "a0feb1322de9e26a4d209d1cfa236deaf64662bb604fa513cca6a057ddf0ef64" "7356632cebc6a11a87bc5fcffaa49bae528026a78637acd03cae57c091afd9b9" "9925d52c9cdb79666ea7a02cea2a11337b152cfb2d69b22610e8e4e2d10105df" default)))
 '(delete-old-versions t)
 '(doc-view-continuous t)
 '(doc-view-scale-internally t)
 '(docker-run-as-root t)
 '(dockerfile-use-sudo t)
 '(ein:console-executable "/usr/local/bin/ipython3")
 '(ein:enable-dynamic-javascript t)
 '(ein:force-sync nil)
 '(ein:notebook-autosave-frequency 5)
 '(ein:use-auto-complete-superpack t)
 '(electric-pair-delete-adjacent-pairs t)
 '(electric-pair-inhibit-predicate (quote electric-pair-default-inhibit))
 '(electric-pair-mode t)
 '(electric-pair-preserve-balance t)
 '(electric-pair-skip-self (quote electric-pair-default-skip-self))
 '(elpy-modules
   (quote
    (elpy-module-company elpy-module-eldoc elpy-module-flymake elpy-module-pyvenv elpy-module-highlight-indentation elpy-module-yasnippet elpy-module-sane-defaults)))
 '(elpy-rpc-python-command "python3")
 '(eww-search-prefix "https://www.google.com/?q=")
 '(global-visible-mark-mode t)
 '(google-translate-show-phonetic t)
 '(helm-autoresize-max-height 50)
 '(helm-autoresize-min-height 10)
 '(helm-buffer-max-length 15)
 '(helm-buffers-column-separator " |")
 '(helm-buffers-end-truncated-string "")
 '(helm-buffers-fuzzy-matching t)
 '(helm-buffers-truncate-lines t)
 '(helm-candidate-number-limit 1000)
 '(helm-completing-read-dynamic-complete nil)
 '(helm-ff-file-name-history-use-recentf nil)
 '(helm-mode-fuzzy-match t)
 '(helm-recentf-fuzzy-match t)
 '(highline-vertical nil)
 '(history-length t)
 '(holiday-other-holidays (quote (holiday-german-holidays)))
 '(indent-tabs-mode nil)
 '(initial-buffer-choice t)
 '(jedi:complete-on-dot t)
 '(jedi:key-complete (quote <C-tab>))
 '(magit-auto-revert-immediately t)
 '(magit-auto-revert-mode t)
 '(magit-repository-directories (quote (("~/" . 10))))
 '(ob-ipython-command "jupyter")
 '(ob-ipython-kernel-extra-args nil)
 '(org-M-RET-may-split-line (quote ((default))))
 '(org-agenda-custom-commands
   (quote
    (("d" todo "DELEGATED" nil)
     ("c" todo "DONE|DEFERRED|CANCELLED" nil)
     ("p" todo "TOPLAN|TOPREAD|TOTHINK" nil)
     ("w" todo "WAITING" nil)
     ("W" "10 days view" agenda ""
      ((org-agenda-span 10)))
     ("M" "30 days agenda" agenda ""
      ((org-agenda-span 30)))
     ("B" "60 days agenda" agenda ""
      ((org-agenda-span 60)))
     ("A" agenda ""
      ((org-agenda-skip-function
        (lambda nil
          (org-agenda-skip-entry-if
           (quote notregexp)
           "\\=.*\\[#A\\]")))
       (org-agenda-ndays 1)
       (org-agenda-overriding-header "Today's Priority #A tasks: ")))
     ("u" "Unscheduled TODO entries" alltodo ""
      ((org-agenda-skip-function
        (lambda nil
          (org-agenda-skip-entry-if
           (quote scheduled)
           (quote deadline)
           (quote regexp)
           "
]+>")))
       (org-agenda-overriding-header "Unscheduled TODO entries: "))))))
 '(org-agenda-files
   (quote
    ("~/Dropbox/org-mode/events.org" "~/Dropbox/org-mode/track.org" "~/Dropbox/org-mode/2019.org")))
 '(org-agenda-scheduled-leaders (quote ("S:" "S.%2dx: ")))
 '(org-agenda-show-all-dates t)
 '(org-agenda-skip-deadline-if-done t)
 '(org-agenda-skip-scheduled-if-deadline-is-shown (quote not-today))
 '(org-agenda-skip-scheduled-if-done t)
 '(org-agenda-skip-timestamp-if-done t)
 '(org-agenda-span 30)
 '(org-agenda-start-on-weekday nil)
 '(org-babel-R-command "R --slave --no-save")
 '(org-babel-load-languages (quote ((emacs-lisp . t) (python . t))))
 '(org-babel-no-eval-on-ctrl-c-ctrl-c t)
 '(org-babel-python-command "python3")
 '(org-babel-python-mode (quote python))
 '(org-babel-tangle-lang-exts
   (quote
    (("python" . "py")
     ("emacs-lisp" . "el")
     ("elisp" . "el")
     ("javascript" . "js"))))
 '(org-brain-headline-links-only-show-visible nil)
 '(org-brain-path "/home/teddd/org/brain/")
 '(org-brain-refile-max-level 5)
 '(org-bullets-bullet-list (quote ("✿" "✸" "◇" "★" "▸")))
 '(org-catch-invisible-edits (quote error))
 '(org-confirm-babel-evaluate nil)
 '(org-cycle-separator-lines 3)
 '(org-deadline-warning-days 14)
 '(org-default-priority 66)
 '(org-edit-src-auto-save-idle-delay 10)
 '(org-edit-src-content-indentation 0)
 '(org-export-backends (quote (ascii beamer html icalendar latex odt)))
 '(org-export-use-babel nil)
 '(org-fast-tag-selection-single-key (quote expert))
 '(org-fontify-done-headline t)
 '(org-fontify-whole-heading-line t)
 '(org-global-properties
   (quote
    (("PRIORITIES" . "A E A")
     ("SEQ_TODO" . "TODO STARTED WAITING TOPLAN TO-STUDY TO-CLARIFY | DONE DEFERRED CANCELLED")
     ("STARTUP" . "indent hidestars"))))
 '(org-goto-interface (quote outline-path-completion))
 '(org-goto-max-level 8)
 '(org-habit-completed-glyph 10003)
 '(org-habit-following-days 5)
 '(org-habit-graph-column 70)
 '(org-habit-preceding-days 14)
 '(org-habit-show-all-today t)
 '(org-habit-show-done-always-green nil)
 '(org-habit-show-habits-only-for-today t)
 '(org-hide-emphasis-markers t)
 '(org-hide-leading-stars t)
 '(org-html-indent t)
 '(org-html-link-org-files-as-html t)
 '(org-html-toplevel-hlevel 1)
 '(org-indent-indentation-per-level 2)
 '(org-level-color-stars-only nil)
 '(org-log-done nil)
 '(org-log-into-drawer t)
 '(org-modules
   (quote
    (org-bbdb org-bibtex org-docview org-gnus org-habit org-info org-irc org-mhe org-rmail org-w3m)))
 '(org-n-level-faces 3)
 '(org-odd-levels-only nil)
 '(org-outline-path-complete-in-steps nil)
 '(org-pretty-entities nil)
 '(org-priority-start-cycle-with-default nil)
 '(org-refile-allow-creating-parent-nodes (quote confirm))
 '(org-refile-use-cache nil)
 '(org-refile-use-outline-path nil)
 '(org-reverse-note-order nil)
 '(org-scheduled-past-days 1)
 '(org-speed-commands-user (quote (("P" . org-set-property))))
 '(org-src-fontify-natively t)
 '(org-startup-indented t)
 '(org-startup-with-inline-images t)
 '(org-tags-column -80)
 '(org-use-property-inheritance (quote ("header-args")))
 '(org-use-speed-commands t)
 '(package-selected-packages
   (quote
    (systemd psgml cov indicators spinner sml-modeline indent-tools yaml-mode jupyter zmq helpful speed-type with-simulated-input i3wm ivy-yasnippet r-autoyas yas-jit yascroll yasnippet term-alert term-cmd term-manager term-projectile term-run treemacs-projectile treemacs 0xc sane-term helm-mt dashboard-hackernews cdlatex latex-preview-pane helm-company flycheck-grammalecte names gnuplot gnuplot-mode markdown-preview-mode docker dockerfile-mode indium web-beautify jq-mode json-mode json-navigator json-snatcher google-translate interaction-log backup-walker help-fns+ google-this git-messenger flyspell-correct-ivy flycheck esup elfeed dashboard counsel swiper button-lock org-plus-contrib exec-path-from-shell pyenv-mode virtualenvwrapper helm-flx german-holidays helm-projectile org-projectile org-projectile-helm yasnippet-snippets babel smart-hungry-delete smart-indent-rigidly symon anaconda-mode dic-lookup-w3m w3m apiwrap auto-highlight-symbol automargin babel-repl backlight bar-cursor benchmark-init benchstat pyimport pyimpsort pynt pytest python-docstring python-x py-yapf helm-eww markdown-preview-eww org-preview-html conkeror-minor-mode drag-stuff commander aggressive-indent org-edna use-package projectile auto-indent-mode auto-complete company helm-swoop highlight-indentation highlight-parentheses magit undo-tree guide-key multicolumn wn-mode org-present org-randomnote org-ref org-review org-sticky-header org-super-agenda org-table-sticky-header org-time-budgets org-transform-tree-table org-web-tools orgnav orgtbl-ascii-plot timesheet html2org mysql-to-org ob-async ob-browser ob-http ob-mongo ob-sql-mode ob-translate org-alert org-attach-screenshot org-autolist org-board org-brain org-bullets org-chef org-clock-today org-dashboard org-dotemacs org-download org-email org-noter t "" 0 1 visible-mark smartscan god-mode ace-jump-helm-line ace-window ace-jump-buffer ace-isearch free-keys highline avy ace-jump-mode which-key helm-commandlinefu helm-backup helm-ag ein eimp embrace helm-core tern-auto-complete tern-context-coloring tern helm xref-js2 wconf tabulated-list tablist marmalade-service marmalade-demo marmalade-client marmalade ledger-mode js2-refactor js2-highlight-vars js-comint jedi helm-ebdb eyebrowse expand-region emacsql-sqlite emacsql-mysql emacs-cl elpy badger-theme ag)))
 '(python-shell-interpreter "python3")
 '(python-shell-interpreter-args "-i --simple-prompt")
 '(recentf-auto-cleanup (quote never))
 '(recentf-max-menu-items 50)
 '(recentf-max-saved-items 200)
 '(recentf-mode t)
 '(safe-local-variable-values
   (quote
    ((org-babel-noweb-wrap-end . ">>>")
     (org-babel-noweb-wrap-start . "<<<")
     (org-confirm-babel-evaluate))))
 '(sane-term-next-on-kill nil)
 '(save-interprogram-paste-before-kill t)
 '(semanticdb-find-default-throttle
   (quote
    (local project unloaded system recursive omniscience)))
 '(semanticdb-project-roots (quote ("~/code/emacs/scimax")))
 '(size-indication-mode t)
 '(sml-modeline-borders nil)
 '(sml-modeline-len 8)
 '(sml-modeline-numbers (quote percentage))
 '(symon-delay 0)
 '(symon-monitors
   (quote
    (symon-linux-memory-monitor symon-linux-cpu-monitor symon-linux-battery-monitor symon-linux-network-rx-monitor symon-linux-network-tx-monitor)))
 '(symon-refresh-rate 4)
 '(symon-sparkline-height 30)
 '(symon-sparkline-thickness 2)
 '(symon-sparkline-type (quote plain))
 '(symon-sparkline-width 100)
 '(term-buffer-maximum-size 20048)
 '(term-char-mode-buffer-read-only t)
 '(term-char-mode-point-at-process-mark t)
 '(term-completion-autolist t)
 '(term-eol-on-send nil)
 '(term-exec-hook nil)
 '(term-input-autoexpand nil)
 '(term-input-chunk-size 2048)
 '(term-input-ignoredups nil)
 '(term-input-ring-file-name nil)
 '(term-scroll-show-maximum-output nil)
 '(term-scroll-to-bottom-on-output t)
 '(term-suppress-hard-newline nil)
 '(treemacs-width 30)
 '(visible-mark-forward-max 10)
 '(visible-mark-inhibit-trailing-overlay t)
 '(visible-mark-max 10)
 '(w3m-default-directory "~/")
 '(w3m-key-binding (quote info))
 '(which-function-mode t)
 '(window-divider-default-bottom-width 2)
 '(window-divider-default-right-width 2)
 '(yas-choose-keys-first t)
 '(yas-choose-tables-first t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "black" :foreground "white" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 105 :width normal :foundry "unknown" :family "DejaVu Sans Mono"))))
 '(avy-lead-face ((t (:background "midnight blue" :foreground "white"))))
 '(avy-lead-face-0 ((t (:background "dark green" :foreground "white"))))
 '(avy-lead-face-1 ((t (:background "purple4" :foreground "white"))))
 '(avy-lead-face-2 ((t (:background "red4" :foreground "white"))))
 '(cursor ((t (:background "firebrick"))))
 '(eww-form-text ((t (:background "black" :foreground "white" :box 1))))
 '(font-lock-comment-face ((t (:foreground "#64bf78"))))
 '(font-lock-function-name-face ((t (:foreground "#00ccff" :weight bold))))
 '(font-lock-keyword-face ((t (:foreground "medium orchid" :weight bold))))
 '(font-lock-string-face ((t (:foreground "#ff8855"))))
 '(google-translate-translation-face ((t (:background "dark green" :weight bold))))
 '(helm-M-x-key ((t (:inherit font-lock-function-name-face :weight normal))))
 '(helm-candidate-number ((t (:inherit font-lock-string-face :inverse-video t))))
 '(helm-header ((t (:background "dark red" :foreground "white"))))
 '(helm-match ((t (:foreground "dark orange" :weight semi-bold))))
 '(helm-selection ((t (:inverse-video t))))
 '(helm-source-header ((t (:inherit font-lock-function-name-face :underline t :weight bold))))
 '(helm-visible-mark ((t (:background "purple4" :foreground "white"))))
 '(highlight ((t (:background "PaleVioletRed1" :foreground "blue" :weight ultra-bold))))
 '(highline-face ((t (:background "midnight blue"))))
 '(info-header-xref ((t (:foreground "dark goldenrod" :weight bold))))
 '(jedi:highlight-function-argument ((t (:inherit bold :foreground "light slate blue"))))
 '(link ((t (:foreground "#00aaaa" :underline t))))
 '(minibuffer-prompt ((t (:foreground "forest green" :weight bold))))
 '(mode-line ((t (:background "black" :foreground "white" :box (:line-width 1 :color "grey50")))))
 '(mode-line-buffer-id ((t (:inherit nil :inverse-video t :weight bold))))
 '(mode-line-emphasis ((t (:inverse-video t))))
 '(mode-line-inactive ((t (:background "#000000" :foreground "#dddddd" :box (:line-width 1 :color "grey15")))))
 '(org-agenda-date-today ((t (:foreground "#88ddbb" :slant italic :weight bold))))
 '(org-agenda-date-weekend ((t (:inherit org-agenda-date :background "black" :inverse-video t :weight bold :height 1.0))))
 '(org-block ((t (:background "gray11"))))
 '(org-block-begin-line ((t (:foreground "#77DDff" :underline t))))
 '(org-block-end-line ((t (:background "#000000" :foreground "#77DDff" :overline t))))
 '(org-date ((t (:foreground "Cyan"))))
 '(org-done ((t (:foreground "PaleGreen" :box (:line-width 2 :color "PaleGreen") :weight bold))))
 '(org-habit-clear-face ((t (:background "medium blue"))))
 '(org-habit-clear-future-face ((t (:background "medium blue"))))
 '(org-habit-overdue-future-face ((t (:background "black"))))
 '(org-level-1 ((t (:foreground "#44bb44" :weight semi-bold))))
 '(org-level-2 ((t (:foreground "#ffd050" :weight semi-bold))))
 '(org-level-3 ((t (:foreground "#ff4b4b" :weight bold))))
 '(org-level-4 ((t (:foreground "chocolate"))))
 '(org-level-6 ((t (:foreground "khaki"))))
 '(org-level-7 ((t (:foreground "#aaffff"))))
 '(org-level-8 ((t (:inherit outline-8))))
 '(org-meta-line ((t (:foreground "#f08090"))))
 '(org-scheduled-today ((t (:foreground "SeaGreen1" :weight bold))))
 '(org-special-keyword ((t (:foreground "#aa44aa" :weight normal))))
 '(org-todo ((t (:foreground "#5599ff" :box (:line-width 2 :color "#5599ff") :weight bold))))
 '(region ((t (:background "turquoise4" :foreground "white"))))
 '(scroll-bar ((t (:background "gainsboro" :weight thin))))
 '(sml-modeline-end-face ((t nil)))
 '(sml-modeline-vis-face ((t (:inverse-video t))))
 '(term-bold ((t (:weight bold))))
 '(term-color-blue ((t (:background "#0066ff" :foreground "#0066ff"))))
 '(term-color-cyan ((t (:background "cyan2" :foreground "cyan2"))))
 '(term-color-magenta ((t (:background "#ff00ff" :foreground "#ff00ff"))))
 '(term-color-red ((t (:background "#ff3333" :foreground "#ff3333"))))
 '(visible-mark-face1 ((t (:underline "magenta"))))
 '(visible-mark-face2 ((t (:underline "green"))))
 '(widget-field ((t (:box (:line-width 1 :color "grey75" :style released-button))))))
