(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ac-auto-show-menu 0.5)
 '(ac-trigger-key "TAB")
 '(ac-use-fuzzy t)
 '(ansi-color-names-vector
   ["#2d3743" "#ff4242" "#74af68" "#dbdb95" "#34cae2" "#008b8b" "#00ede1" "#e1e1e0"])
 '(async-bytecomp-allowed-packages '(all))
 '(async-bytecomp-package-mode t)
 '(auth-source-save-behavior nil)
 '(avy-all-windows-alt 'all-frames)
 '(avy-background t)
 '(avy-dispatch-alist
   '((122 . avy-action-kill)
     (101 . avy-action-mark)
     (97 . avy-action-copy)))
 '(avy-keys '(113 115 119 120 99 100 118 107 108 109))
 '(avy-style 'at)
 '(beacon-blink-delay 0)
 '(beacon-blink-duration 0.2)
 '(beacon-blink-when-focused t)
 '(beacon-blink-when-point-moves-horizontally nil)
 '(beacon-blink-when-point-moves-vertically 30)
 '(beacon-color "blue")
 '(beacon-size 200)
 '(bmkp-last-as-first-bookmark-file "~/.emacs.d/bookmarks")
 '(bmkp-prompt-for-tags-flag t)
 '(bmkp-properties-to-keep '(tags annotation visits time created))
 '(bookmark-save-flag 0)
 '(bookmark-version-control t)
 '(browse-url-conkeror-new-window-is-buffer nil)
 '(calendar-christian-all-holidays-flag t)
 '(calendar-mark-holidays-flag nil)
 '(calendar-view-holidays-initially-flag nil)
 '(calendar-week-start-day 1)
 '(cdlatex-paired-parens "$[{(")
 '(cfw:org-capture-template
   '("c" "calfw2org" entry
     (file nil)
     "* %?
    %(cfw:org-capture-day)"))
 '(column-number-mode t)
 '(company-minimum-prefix-length 2)
 '(confirm-kill-processes nil)
 '(custom-enabled-themes '(mystery))
 '(custom-safe-themes
   '("2231539e6d4d2a4d6b6121e3128813c64bd0a94ff1249c4510d7b357c9565ba8" "ab04c00a7e48ad784b52f34aa6bfa1e80d0c3fcacc50e1189af3651013eb0d58" "a0feb1322de9e26a4d209d1cfa236deaf64662bb604fa513cca6a057ddf0ef64" "7356632cebc6a11a87bc5fcffaa49bae528026a78637acd03cae57c091afd9b9" "9925d52c9cdb79666ea7a02cea2a11337b152cfb2d69b22610e8e4e2d10105df" default))
 '(delete-old-versions t)
 '(display-line-numbers-grow-only nil)
 '(display-line-numbers-width nil)
 '(display-line-numbers-width-start t)
 '(doc-view-continuous t)
 '(doc-view-scale-internally t)
 '(docker-run-as-root t)
 '(dockerfile-use-sudo t)
 '(ediff-diff-options "-w -B -b")
 '(ein:console-executable "/usr/local/bin/ipython3")
 '(ein:enable-dynamic-javascript t)
 '(ein:force-sync nil)
 '(ein:notebook-autosave-frequency 5)
 '(ein:use-auto-complete-superpack t)
 '(electric-pair-delete-adjacent-pairs t)
 '(electric-pair-inhibit-predicate 'electric-pair-default-inhibit)
 '(electric-pair-mode t)
 '(electric-pair-pairs
   '((34 . 34)
     (39 . 39)
     (36 . 36)
     (123 . 125)
     (91 . 93)
     (40 . 41)))
 '(electric-pair-preserve-balance t)
 '(electric-pair-skip-self 'electric-pair-default-skip-self)
 '(electric-quote-context-sensitive t)
 '(electric-quote-string t)
 '(elpy-modules
   '(elpy-module-company elpy-module-eldoc elpy-module-flymake elpy-module-pyvenv elpy-module-highlight-indentation elpy-module-yasnippet elpy-module-sane-defaults))
 '(elpy-rpc-python-command "python3")
 '(emerge-diff-options "-iEZBb")
 '(eww-search-prefix "https://www.google.com/?q=")
 '(expand-region-preferred-python-mode 'fgallina-python)
 '(global-visible-mark-mode t)
 '(google-translate-show-phonetic t)
 '(helm-autoresize-max-height 50)
 '(helm-autoresize-min-height 10)
 '(helm-buffer-max-length 15)
 '(helm-buffers-column-separator " |")
 '(helm-buffers-end-truncated-string "")
 '(helm-buffers-fuzzy-matching t)
 '(helm-buffers-truncate-lines t)
 '(helm-candidate-number-limit 1000)
 '(helm-completing-read-dynamic-complete nil)
 '(helm-ff-file-name-history-use-recentf nil)
 '(helm-mode-fuzzy-match t)
 '(helm-recentf-fuzzy-match t t)
 '(highlight-parentheses-colors '("firebrick1" "green" "dodger blue" "gold"))
 '(highline-vertical nil)
 '(history-length t)
 '(hl-paren-colors '("firebrick1" "green" "dodger blue" "gold"))
 '(holiday-other-holidays '(holiday-german-holidays))
 '(indent-tabs-mode nil)
 '(initial-buffer-choice t)
 '(ispell-dictionary "français, deutsch, english")
 '(jedi:complete-on-dot t)
 '(jedi:key-complete '<C-tab>)
 '(ob-ipython-command "jupyter")
 '(ob-ipython-kernel-extra-args nil)
 '(org-M-RET-may-split-line '((default)))
 '(org-agenda-custom-commands
   '(("d" todo "DELEGATED" nil)
     ("c" todo "DONE|DEFERRED|CANCELLED" nil)
     ("p" todo "TOPLAN|TOPREAD|TOTHINK" nil)
     ("w" todo "WAITING" nil)
     ("W" "10 days view" agenda ""
      ((org-agenda-span 10)))
     ("M" "30 days agenda" agenda ""
      ((org-agenda-span 30)))
     ("B" "60 days agenda" agenda ""
      ((org-agenda-span 60)))
     ("A" agenda ""
      ((org-agenda-skip-function
        (lambda nil
          (org-agenda-skip-entry-if 'notregexp "\\=.*\\[#A\\]")))
       (org-agenda-ndays 1)
       (org-agenda-overriding-header "Today's Priority #A tasks: ")))
     ("u" "Unscheduled TODO entries" alltodo ""
      ((org-agenda-skip-function
        (lambda nil
          (org-agenda-skip-entry-if 'scheduled 'deadline 'regexp "
]+>")))
       (org-agenda-overriding-header "Unscheduled TODO entries: ")))))
 '(org-agenda-deadline-faces
   '((1.0 . org-warning)
     (0.5 . org-upcoming-deadline)
     (0.0 . default)))
 '(org-agenda-files
   '("~/Dropbox/org-mode/track.org" "/home/teddd/GeometryGroup/geometry-group.org" "/home/teddd/Uni/Kurse/Algebra/content.org" "/home/teddd/Uni/Kurse/Algorithmische Diskrete Mathematik/ADM I/content.org" "/home/teddd/Uni/Kurse/Computer-orientierte Mathematik/content.org" "/home/teddd/Uni/Kurse/Computergrafik/Exercices/cg1_exercise_1/notes.org" "/home/teddd/Uni/Kurse/Computergrafik/content.org" "/home/teddd/Uni/Kurse/Data Warehousing & Business Intellignence/content.org" "/home/teddd/Uni/Kurse/Einführung in die digitale Signalverarbeitung/content.org" "/home/teddd/Uni/Kurse/Geometrie/content.org" "/home/teddd/Uni/Kurse/Harmonic Analysis/content.org" "/home/teddd/Uni/Kurse/Industrial Data Science/content.org" "/home/teddd/Uni/Kurse/Klimavorlesungen/content.org" "/home/teddd/Uni/Kurse/Komplexe Analysis/content.org" "/home/teddd/Uni/Kurse/Lineare Algebra/content.org" "/home/teddd/Uni/Kurse/Logik - Informatik/content.org" "/home/teddd/Uni/Kurse/Natural Language Processing in Theorie und Praxis/Projects/Umformulierer/notes.org" "/home/teddd/Uni/Kurse/Natural Language Processing in Theorie und Praxis/Projects/jobseeker/jobseeker-pitch.org" "/home/teddd/Uni/Kurse/Natural Language Processing in Theorie und Praxis/Projects/ranking.org" "/home/teddd/Uni/Kurse/Natural Language Processing in Theorie und Praxis/content.org" "/home/teddd/Uni/Kurse/Numerische Mathmatik I/WS19/HA1/notebook.org" "/home/teddd/Uni/Kurse/Numerische Mathmatik I/content.org" "/home/teddd/Uni/Kurse/Philosophy of Mathematics/content.org" "/home/teddd/Uni/Kurse/Reelle Analysis/Analysis I/content.org" "/home/teddd/Uni/Kurse/Reelle Analysis/Analysis II/content.org" "/home/teddd/Uni/Kurse/Reelle Analysis/Analysis III/content.org" "/home/teddd/Uni/Kurse/Softwaretechnick und Programmierparadigmen/content.org" "/home/teddd/Uni/Kurse/Topologie/content.org"))
 '(org-agenda-scheduled-leaders '("S:" "S.%2dx: "))
 '(org-agenda-show-all-dates t)
 '(org-agenda-skip-deadline-if-done t)
 '(org-agenda-skip-scheduled-if-deadline-is-shown 'not-today)
 '(org-agenda-skip-scheduled-if-done t)
 '(org-agenda-skip-timestamp-if-done t)
 '(org-agenda-span 30)
 '(org-agenda-start-on-weekday nil)
 '(org-babel-R-command "R --slave --no-save")
 '(org-babel-load-languages '((emacs-lisp . t) (python . t)))
 '(org-babel-python-command "python3")
 '(org-babel-python-mode 'python)
 '(org-babel-tangle-lang-exts
   '(("python" . "py")
     ("emacs-lisp" . "el")
     ("elisp" . "el")
     ("javascript" . "js")))
 '(org-brain-backlink t)
 '(org-brain-file-entries-use-title nil)
 '(org-brain-headline-entry-name-format-string "%s : %s")
 '(org-brain-headline-links-only-show-visible nil)
 '(org-brain-path "/home/teddd/org/brain/")
 '(org-brain-refile-max-level 5)
 '(org-brain-scan-directories-recursively nil)
 '(org-bullets-bullet-list '("✸" "◇" "▸" "★"))
 '(org-catch-invisible-edits 'error)
 '(org-clone-delete-id t)
 '(org-confirm-babel-evaluate nil)
 '(org-cycle-hook '(org-cycle-hide-archived-subtrees org-cycle-hide-drawers))
 '(org-cycle-separator-lines 3)
 '(org-deadline-warning-days 14)
 '(org-download-delete-image-after-download nil)
 '(org-download-screenshot-file "/home/teddd/tmp/screenshot.png")
 '(org-download-screenshot-method "gnome-screenshot -a -f %s")
 '(org-edit-src-auto-save-idle-delay 10)
 '(org-edit-src-content-indentation 0)
 '(org-emphasis-alist
   '(("*" bold)
     ("/" italic)
     ("_" flymake-error)
     ("=" org-verbatim verbatim)
     ("~" org-code verbatim)
     ("+" font-lock-comment-face)))
 '(org-export-backends '(ascii beamer html icalendar latex odt))
 '(org-export-use-babel nil)
 '(org-fast-tag-selection-single-key 'expert)
 '(org-fontify-done-headline t)
 '(org-fontify-whole-heading-line t)
 '(org-format-latex-options
   '(:foreground default :background default :scale 1.7 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers
                 ("begin" "$1" "$" "$$" "\\(" "\\[")))
 '(org-global-properties
   '(("PRIORITIES" . "A E A")
     ("SEQ_TODO" . "TODO STARTED WAITING TOPLAN TO-STUDY TO-CLARIFY | DONE DEFERRED CANCELLED")
     ("STARTUP" . "indent hidestars")))
 '(org-goto-interface 'outline-path-completion)
 '(org-goto-max-level 8)
 '(org-habit-completed-glyph 10003)
 '(org-habit-following-days 5)
 '(org-habit-graph-column 70)
 '(org-habit-preceding-days 14)
 '(org-habit-show-all-today t)
 '(org-habit-show-done-always-green nil)
 '(org-habit-show-habits-only-for-today t)
 '(org-hide-emphasis-markers t)
 '(org-hide-leading-stars nil)
 '(org-html-indent t)
 '(org-html-link-org-files-as-html t)
 '(org-html-toplevel-hlevel 1)
 '(org-id-link-to-org-use-id t)
 '(org-id-search-archives nil)
 '(org-indent-boundary-char 32)
 '(org-indent-indentation-per-level 1)
 '(org-level-color-stars-only nil)
 '(org-link-elisp-confirm-function 'y-or-n-p)
 '(org-modules
   '(org-bbdb org-bibtex org-docview org-gnus org-habit org-info org-irc org-mhe org-rmail org-w3m))
 '(org-n-level-faces 3)
 '(org-odd-levels-only nil)
 '(org-outline-path-complete-in-steps nil)
 '(org-pdftools-root-dir "./")
 '(org-pretty-entities nil)
 '(org-preview-latex-default-process 'imagemagick)
 '(org-preview-latex-process-alist
   '((dvipng :programs
             ("latex" "dvipng")
             :description "dvi > png" :message "you need to install the programs: latex and dvipng." :image-input-type "dvi" :image-output-type "png" :image-size-adjust
             (1.0 . 1.0)
             :latex-compiler
             ("latex -interaction nonstopmode -output-directory %o %f")
             :image-converter
             ("dvipng -fg %F -bg %B -D %D -T tight -o %O %f"))
     (dvisvgm :programs
              ("latex" "dvisvgm")
              :description "dvi > svg" :message "you need to install the programs: latex and dvisvgm." :use-xcolor t :image-input-type "dvi" :image-output-type "svg" :image-size-adjust
              (1.7 . 1.5)
              :latex-compiler
              ("latex -interaction nonstopmode -output-directory %o %f")
              :image-converter
              ("dvisvgm %f -n -b min -c %S -o %O"))
     (imagemagick :programs
                  ("latex" "convert")
                  :description "pdf > png" :message "you need to install the programs: latex and imagemagick." :use-xcolor t :image-input-type "pdf" :image-output-type "png" :image-size-adjust
                  (1.0 . 1.0)
                  :latex-compiler
                  ("pdflatex -interaction nonstopmode -output-directory %o %f")
                  :image-converter
                  ("convert -quiet -density %D -trim -antialias %f -quality 100 %O"))))
 '(org-priority-default 66)
 '(org-priority-start-cycle-with-default nil)
 '(org-refile-allow-creating-parent-nodes 'confirm)
 '(org-refile-use-cache nil)
 '(org-refile-use-outline-path nil)
 '(org-reverse-note-order t)
 '(org-scheduled-past-days 1)
 '(org-show-context-detail
   '((agenda . local)
     (bookmark-jump . lineage)
     (isearch . lineage)
     (default . ancestors)
     (occur-tree . canonical)))
 '(org-speed-commands-user '(("P" quote helm-org-parent-headings)) t)
 '(org-src-fontify-natively t)
 '(org-startup-indented t)
 '(org-startup-with-inline-images t)
 '(org-startup-with-latex-preview t)
 '(org-tags-column -80)
 '(org-use-property-inheritance '("header-args"))
 '(org-use-speed-commands t)
 '(package-selected-packages
   '(org-auto-tangle org-appear org-fragtog sclang-snippets ox-json jupyter hideshow-org helm-wikipedia glsl-mode tide plur minimap typescript-mode backup-each-save highlight-numbers highlight-quoted toc-mode ein matlab-mode multi-vterm vterm org-pdftools saveplace-pdf-view pdf-tools w3m magithub indent-tools indent-guide magit org-treeusage org-cliplink sysctl org-recent-headings pyenv-mode-auto org-alert org-autolist cdlatex yaml-mode auctex auto-complete-auctex company-auctex emacsql-sqlite anki-connect anki-editor worf helm-org esxml graphviz-dot-mode helm-tramp company-math company-statistics a xmlgen ascii-art-to-unicode pdfgrep company-anaconda pyenv-mode anaconda-mode move-text highlight-symbol goto-last-change helpful helm-ag helm-company helm-core helm-flx helm-gtags helm-helm-commands helm-swoop ob-browser ob-http beacon ess git-commit jedi-core markdown-mode markdown-preview-mode multicolumn ob-async org org-bullets org-dotemacs org-download smartscan systemd visible-mark web-beautify wgrep wgrep-helm which-key with-simulated-input yasnippet yasnippet-snippets gnu-elpa-keyring-update stickyfunc-enhance company-c-headers sr-speedbar function-args calfw-org wgrep-ag org-analyzer calfw psgml indicators spinner yas-jit gnuplot-mode dockerfile-mode json-mode json-navigator json-snatcher interaction-log backup-walker help-fns+ google-this git-messenger flyspell-correct-ivy esup button-lock org-plus-contrib exec-path-from-shell german-holidays smart-hungry-delete apiwrap auto-highlight-symbol automargin babel-repl backlight bar-cursor benchmark-init benchstat pyimport pyimpsort pynt pytest python-x py-yapf helm-eww markdown-preview-eww org-preview-html drag-stuff auto-indent-mode company highlight-indentation highlight-parentheses undo-tree guide-key t "" 0 1 eimp embrace jedi helm-ebdb expand-region ag))
 '(pdf-view-continuous t)
 '(pdf-view-display-size 'fit-width)
 '(pdfgrep-mode t)
 '(pdfgrep-options " -H -n -r ")
 '(preview-pdf-color-adjust-method nil)
 '(preview-transparent-color '(highlight :background))
 '(python-shell-interpreter "python3")
 '(python-shell-interpreter-args "")
 '(recentf-auto-cleanup 'never)
 '(recentf-mode t)
 '(safe-local-variable-values
   '((company-mode)
     (eval org-map-entries 'org-id-get-create)
     (org-download-image-dir . "./Images")
     (org-download-heading-lvl . 1)
     (org-download-heading-lvl)
     (org-download-heading-lvl . 0)
     (org-download-heading-lvl . 3)
     (org-babel-noweb-wrap-end . ">>>")
     (org-babel-noweb-wrap-start . "<<<")
     (org-confirm-babel-evaluate)))
 '(sane-term-next-on-kill nil)
 '(save-interprogram-paste-before-kill t)
 '(semanticdb-find-default-throttle '(local project unloaded system recursive omniscience))
 '(semanticdb-project-roots '("~/code/emacs/scimax"))
 '(size-indication-mode t)
 '(sml-modeline-borders nil)
 '(sml-modeline-len 8)
 '(sml-modeline-numbers 'percentage)
 '(symon-delay 0)
 '(symon-monitors
   '(symon-linux-memory-monitor symon-linux-cpu-monitor symon-linux-battery-monitor symon-linux-network-rx-monitor symon-linux-network-tx-monitor))
 '(symon-refresh-rate 4)
 '(symon-sparkline-height 30)
 '(symon-sparkline-thickness 2)
 '(symon-sparkline-type 'plain)
 '(symon-sparkline-width 100)
 '(term-buffer-maximum-size 20048)
 '(term-char-mode-buffer-read-only t)
 '(term-char-mode-point-at-process-mark t)
 '(term-completion-autolist t)
 '(term-eol-on-send nil)
 '(term-exec-hook nil)
 '(term-input-autoexpand nil)
 '(term-input-chunk-size 2048)
 '(term-input-ignoredups nil)
 '(term-input-ring-file-name nil)
 '(term-scroll-show-maximum-output nil)
 '(term-scroll-to-bottom-on-output t)
 '(term-suppress-hard-newline nil)
 '(treemacs-width 30)
 '(visible-mark-forward-max 10)
 '(visible-mark-inhibit-trailing-overlay t)
 '(visible-mark-max 10)
 '(w3m-default-directory "~/")
 '(w3m-key-binding 'info)
 '(which-function-mode t)
 '(window-divider-default-bottom-width 2)
 '(window-divider-default-right-width 2)
 '(yas-choose-keys-first t)
 '(yas-choose-tables-first t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "black" :foreground "white" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 113 :width normal :foundry "Regular" :family "Monospace"))))
 '(avy-lead-face ((t (:background "midnight blue" :foreground "white"))))
 '(avy-lead-face-0 ((t (:background "dark green" :foreground "white"))))
 '(avy-lead-face-1 ((t (:background "purple4" :foreground "white"))))
 '(avy-lead-face-2 ((t (:background "red4" :foreground "white"))))
 '(cfw:face-default-day ((t (:inherit cfw:face-day-title))))
 '(cfw:face-grid ((t (:foreground "#222"))))
 '(cfw:face-header ((t (:foreground "white"))))
 '(cfw:face-holiday ((t (:background "grey10" :foreground "sandy brown" :weight bold))))
 '(cfw:face-select ((t (:inverse-video t))))
 '(cfw:face-sunday ((t (:foreground "sandy brown" :weight bold))))
 '(cfw:face-title ((t (:inherit variable-pitch :foreground "white" :height 3.0))))
 '(cfw:face-today ((t nil)))
 '(cfw:face-today-title ((t (:foreground "deep sky blue" :box (:line-width 1 :color "white") :weight bold))))
 '(cfw:face-toolbar ((t (:background "black" :foreground "black"))))
 '(cfw:face-toolbar-button-off ((t (:foreground "dim gray" :weight bold))))
 '(cfw:face-toolbar-button-on ((t (:foreground "white" :weight bold))))
 '(eww-form-text ((t (:background "black" :foreground "white" :box 1))))
 '(font-lock-comment-face ((t (:foreground "#64bf78"))))
 '(font-lock-function-name-face ((t (:foreground "#00ccff" :weight bold))))
 '(font-lock-keyword-face ((t (:foreground "medium orchid" :weight bold))))
 '(font-lock-string-face ((t (:foreground "#ff8855"))))
 '(google-translate-translation-face ((t (:background "dark green" :weight bold))))
 '(helm-M-x-key ((t (:inherit font-lock-function-name-face :weight normal))))
 '(helm-candidate-number ((t (:inherit font-lock-string-face :inverse-video t))))
 '(helm-header ((t (:background "dark red" :foreground "white"))))
 '(helm-match ((t (:foreground "dark orange" :weight semi-bold))))
 '(helm-selection ((t (:inverse-video t))))
 '(helm-source-header ((t (:inherit font-lock-function-name-face :underline t :weight bold))))
 '(helm-visible-mark ((t (:background "purple4" :foreground "white"))))
 '(highlight ((t (:background "#000" :inverse-video t))))
 '(highline-face ((t (:background "midnight blue"))))
 '(hl-line ((t (:background "gray14"))))
 '(info-header-xref ((t (:foreground "dark goldenrod" :weight bold))))
 '(isearch ((t (:background "deep sky blue"))))
 '(jedi:highlight-function-argument ((t (:inherit bold :foreground "light slate blue"))))
 '(line-number ((t (:inherit shadow :background "#151515"))))
 '(line-number-current-line ((t (:inherit line-number :inverse-video nil))))
 '(link ((t (:foreground "#FF5D9D" :underline t))))
 '(linum ((t (:background "black" :foreground "#555"))))
 '(minibuffer-prompt ((t (:foreground "forest green" :weight bold))))
 '(mode-line ((t (:background "black" :foreground "white" :box (:line-width 1 :color "grey50")))))
 '(mode-line-buffer-id ((t (:inherit nil :inverse-video t :weight bold))))
 '(mode-line-emphasis ((t (:inverse-video t))))
 '(mode-line-inactive ((t (:background "#000000" :foreground "#dddddd" :box (:line-width 1 :color "grey15")))))
 '(org-agenda-date-today ((t (:background "#88ddbb" :foreground "black"))))
 '(org-agenda-date-weekend ((t (:foreground "#00dddd" :weight bold))))
 '(org-block ((t (:background "gray11"))))
 '(org-block-begin-line ((t (:foreground "#05ABF8" :underline t))))
 '(org-block-end-line ((t (:foreground "#05ABF8" :overline t))))
 '(org-column ((t (:inverse-video t))))
 '(org-date ((t (:foreground "#5ff" :underline t))))
 '(org-done ((t (:foreground "#85ed20" :box (:line-width 2 :color "#85ed20") :weight bold))))
 '(org-drawer ((t (:foreground "dim gray" :weight normal))))
 '(org-ellipsis ((t (:weight normal :height 0.7))))
 '(org-habit-clear-face ((t (:background "medium blue"))))
 '(org-habit-clear-future-face ((t (:background "medium blue"))))
 '(org-habit-overdue-future-face ((t (:background "black"))))
 '(org-level-1 ((t (:foreground "#34F13F" :weight semi-bold))))
 '(org-level-2 ((t (:foreground "#FFE270" :weight semi-bold))))
 '(org-level-3 ((t (:foreground "#FF8170" :weight bold))))
 '(org-level-4 ((t (:foreground "chocolate"))))
 '(org-level-6 ((t (:foreground "khaki"))))
 '(org-level-7 ((t (:foreground "#aaffff"))))
 '(org-level-8 ((t (:inherit outline-8))))
 '(org-meta-line ((t (:foreground "#f08090"))))
 '(org-property-value ((t (:inherit org-special-keyword))) t)
 '(org-scheduled-today ((t (:foreground "SeaGreen1" :weight bold))))
 '(org-special-keyword ((t (:foreground "dark gray" :weight normal))))
 '(org-table ((t (:background "#111" :foreground "white"))))
 '(org-tag ((t (:background "#333333" :weight thin))))
 '(org-todo ((t (:foreground "#05ABF8" :box (:line-width 2 :color "#05ABF8") :weight bold))))
 '(pdf-links-read-link ((t (:inherit link))))
 '(preview-face ((t (:inherit org-block))))
 '(region ((t (:background "#add" :foreground "black"))))
 '(scroll-bar ((t (:background "gainsboro" :weight thin))))
 '(sml-modeline-end-face ((t nil)))
 '(sml-modeline-vis-face ((t (:inverse-video t))))
 '(term-bold ((t (:weight bold))))
 '(term-color-blue ((t (:background "#0066ff" :foreground "#0066ff"))))
 '(term-color-cyan ((t (:background "cyan2" :foreground "cyan2"))))
 '(term-color-magenta ((t (:background "#ff00ff" :foreground "#ff00ff"))))
 '(term-color-red ((t (:background "#ff3333" :foreground "#ff3333"))))
 '(visible-mark-face1 ((t (:underline "magenta"))))
 '(visible-mark-face2 ((t (:underline "green"))))
 '(widget-field ((t (:box (:line-width 1 :color "grey75" :style released-button))))))
