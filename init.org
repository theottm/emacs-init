* .emacs
** Emacs core
*** Package management
**** code
#+begin_src emacs-lisp
    (require 'package)
    (setq package-archives
          '(
            ("marmalade" . "http://marmalade-repo.org/packages/")
            ("elpa" . "http://tromey.com/elpa/")
            ("melpa" . "http://melpa.milkbox.net/packages/")
            ("gnu" . "http://elpa.gnu.org/packages/")
            ("org" . "https://orgmode.org/elpa/")
            ))
    (setq package-enable-at-startup nil)
    (require (quote org))
    (package-initialize)
#+END_SRC
**** load path
#+BEGIN_SRC emacs-lisp
(let ((default-directory  "~/.emacs.d/lisp/"))
  (normal-top-level-add-subdirs-to-load-path))
#+END_SRC

**** cask
**** COMMENT epackage
Install and manage packages with github
Provides easier access to EmacsWiki packages
Also better package management Ã  la Debian (decentralised // with git)
***** additional code
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/packages/epackage")
  (require 'epackage)
  (add-to-list 'epackage--download-action-list 'compile)
#+END_SRC
***** COMMENT copied instructions code
#+BEGIN_SRC emacs-lisp
e
    ;; If you're behind proxy, be sure to define connection
    ;; details before you start Emacs at command line.
    ;; Consult http://stackoverflow.com/questions/496277/git-error-fatal-unable-to-connect-a-socket-invalid-argument
    ;; for details. From bash shell:
    ;;
    ;;    export http_proxy=http://<username>:<password>@<proxy host>:<proxy port>
    ;;
    ;; Or, this may also be possible:
    ;;
    ;;    git config --global http.proxy http://<username>:<password>@<proxy host>:<proxy port>

    ;; If you're behind firewall and Git port 9418 is blocked, you
    ;; want to use HTTP and translate addresses with this table:
    ;;
    ;; (setq epackage--sources-replace-table
    ;;       '(("git://github" "http://github")))

    ;; -- If you want to customize any of the epackages, like BBDB,
    ;; -- do it *here*, at this point, before the next `load' command.

    ;; One big file to boot all installed epackages
    ;; Automatically generated. Do not edit.
    (load "~/.emacs.d/epackage/00conf/epackage-loader" 'noerr)

    ;;  M-x epackage to start the epackage manager
    (autoload 'epackage-manager "epackage" "" t)

    (autoload 'epackage-loader-file-generate-boot   "epackage" "" t)
    (autoload 'epackage-cmd-autoload-package        "epackage" "" t)
    (autoload 'epackage-cmd-enable-package          "epackage" "" t)
    (autoload 'epackage-cmd-disable-package         "epackage" "" t)
    (autoload 'epackage-cmd-activate-package        "epackage" "" t)
    (autoload 'epackage-cmd-deactivate-package      "epackage" "" t)
    (autoload 'epackage-cmd-clean-package           "epackage" "" t)
    (autoload 'epackage-cmd-remove-package          "epackage" "" t)
    (autoload 'epackage-cmd-upgrade-package         "epackage" "" t)
    (autoload 'epackage-cmd-upgrade-packages-all    "epackage" "" t)
    (autoload 'epackage-cmd-sources-list-download   "epackage" "" t)
    (autoload 'epackage-cmd-download-package        "epackage" "" t)
    (autoload 'epackage-initialize                  "epackage" "" t)
    (autoload 'epackage-version                     "epackage" "" t)
    (autoload 'epackage-documentation               "epackage" "" t)

    ;; .. Developer functions
    ;; Write initial templates from a single *.el
    (autoload 'epackage-devel-compose-package-dir   "epackage" "" t)


#+END_SRC
*** utilities
#+BEGIN_SRC emacs-lisp
;; emacs init file keybinding
(defun find-init ()
  (interactive)
  (find-file init-file))
(global-set-key "\C-ce" 'find-init)
;; don't open *Scratch* buffer on opening
(setq initial-scratch-message nil)
;; alternative to Alt-X
(global-set-key "\C-xm" 'execute-extended-command)
;; no menu and icons
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
;; recentf
(recentf-mode 1)
(run-at-time nil (* 5 60) 'recentf-save-list)
;; load-file
(global-set-key "\C-c\C-l" 'load-file)
;; slime (for lisp)
;; y or n instead of yes or no
(fset 'yes-or-no-p 'y-or-n-p)
;; change title of the frame to name of buffer
;;(set-frame-name "EMACS <3")
(setq frame-title-format "%b")
#+END_SRC
*** custom set options
#+BEGIN_SRC emacs-lisp
    (setq custom-file "~/code/emacs/inits/teddd-emacs/custom.el")
    (load custom-file)
#+END_SRC
*** Cool stuff
**** COMMENT welcome message
***** first
#+BEGIN_SRC emacs-lisp
    (add-hook 'emacs-startup-hook
              (lambda ()
                (when (string= (buffer-name) "*scratch*")
                  (animate-string ("Welcome Sir!") (/ (frame-height) 2)))))
#+END_SRC
***** TODO COMMENT to try
#+BEGIN_SRC emacs-lisp

(animate-sequence '("Hello Mister" "We are happy to welcome you onboard" "Please make yourself confortable before you strat you hard work") 1)

#+END_SRC
**** handoff
#+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/handoff")
    (require 'handoff)
    (handoff-global-mode)
#+END_SRC
**** COMMENT zone mode
#+BEGIN_SRC emacs-lisp

    (zone-mode)
    (zone-when-idle 60)

#+END_SRC
*** Helm
#+BEGIN_SRC emacs-lisp
    (require 'helm)
    (require 'helm-config)
    (global-set-key (kbd "C-c h") 'helm-command-prefix)
    (global-unset-key (kbd "C-x c"))
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
    (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
    (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
    (when (executable-find "curl")
      (setq helm-google-suggest-use-curl-p t))
    (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
          helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
          helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
          helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
          helm-ff-file-name-history-use-recentf t
          helm-echo-input-in-header-line t)
    (defun spacemacs//helm-hide-minibuffer-maybe ()
      "Hide minibuffer in Helm session if we use the header line as input field."
      (when (with-helm-buffer helm-echo-input-in-header-line)
        (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
          (overlay-put ov 'window (selected-window))
          (overlay-put ov 'face
                       (let ((bg-color (face-background 'default nil)))
                         `(:background ,bg-color :foreground ,bg-color)))
          (setq-local cursor-type nil))))
    (add-hook 'helm-minibuffer-set-up-hook
              'spacemacs//helm-hide-minibuffer-maybe)
    (global-set-key (kbd "M-x") #'helm-M-x)
    (setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x
    (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
    (global-set-key (kbd "C-c C-f") #'helm-for-files)
    (global-set-key (kbd "C-x C-f") #'helm-find-files)
    (global-set-key (kbd "M-!") 'helm-show-kill-ring)
    (global-set-key (kbd "C-x b") 'helm-mini)
    (global-set-key (kbd "C-x C-b") 'helm-mini)
    (setq helm-buffers-fuzzy-matching t
          helm-recentf-fuzzy-match    t)
    (setq helm-autoresize-max-height 50)
    (setq helm-autoresize-min-height 0)
    (helm-autoresize-mode 1)
    (helm-mode 1)
(eval-after-load 'company
  '(progn
     (define-key company-mode-map (kbd "C-:") 'helm-company)
     (define-key company-active-map (kbd "C-:") 'helm-company)))
;; (add-to-list '(helm-completing-read-handlers-alist) '(find-file))

#+END_SRC
**** flx score
#+BEGIN_SRC emacs-lisp
(helm-flx-mode +1)
#+END_SRC
*** Theme
#+begin_src emacs-lisp
    (add-to-list 'load-path              "~/.emacs.d/mystery-theme.el/")
    (add-to-list 'custom-theme-load-path "~/.emacs.d/mystery-theme.el")
#+end_src

*** Dired
#+BEGIN_SRC emacs-lisp

(setq dired-listing-switches "-aslh")

#+END_SRC
*** Debugging
**** Interaction log
#+BEGIN_SRC emacs-lisp
(require 'interaction-log)
(interaction-log-mode +1)

(global-set-key
 (kbd "C-h C-l")
 (lambda () (interactive) (display-buffer ilog-buffer-name)))
#+END_SRC
*** COMMENT dashbord
:PROPERTIES:
:CREATED:  <2019-01-13 dim. 22:48>
:END:
#+BEGIN_SRC emacs-lisp
(require 'dashboard)
(dashboard-setup-startup-hook)
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))

;; Set the title
(setq dashboard-banner-logo-title "Welcome to Emacs Dashboard")
;; Set the banner
(setq dashboard-startup-banner 'logo)

;; (setq dashboard-items '((projects . 5)
;;                         (recents  . 5)
;;                         (agenda . 5)
;;                         (registers . 5)))

;; (defun dashboard-insert-custom (list-size)
;;   (insert "Custom text"))
;; (add-to-list 'dashboard-item-generators  '(custom . dashboard-insert-custom))
;; (add-to-list 'dashboard-items '(custom) t)

;; (setq show-week-agenda-p t)
#+END_SRC
*** Unix Shell
**** Open external terminal
#+BEGIN_SRC emacs-lisp
(defun external-term()
  "Open simple terminal at the current buffer working dir in a window out of emacs"
  (interactive)
  (shell-command "st &"))
#+END_SRC

**** Eshell
#+begin_src emacs-lisp
    ;; Eshell
    (add-hook 'eshell-mode-hook
              (lambda ()
                (eshell-cmpl-initialize)
                (define-key eshell-mode-map [remap eshell-pcomplete] 'helm-esh-pcomplete)
                (define-key eshell-mode-map (kbd "M-p") 'helm-eshell-history)))
    (defun pcomplete/sudo ()
      (let ((prec (pcomplete-arg 'last -1)))
        (cond ((string= "sudo" prec)
               (while (pcomplete-here*
                       (funcall pcomplete-command-completion-function)
                       (pcomplete-arg 'last) t))))))
#+end_src
**** term / sane term
:PROPERTIES:
:CREATED:  <2019-02-12 mar. 22:55>
:END:
***** config
:PROPERTIES:
:CREATED:  <2019-02-28 jeu. 13:51>
:END:

#+BEGIN_SRC emacs-lisp
(add-hook 'term-mode-hook
 	      (function
 	       (lambda ()
 	             (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
 	             (setq-local mouse-yank-at-point t)
 	             (setq-local transient-mark-mode nil)
 	             (auto-fill-mode -1)
 	             (setq tab-width 8 )
				 )))
#+END_SRC

***** kill term buffer and frame
:PROPERTIES:
:CREATED:  <2019-02-21 jeu. 15:41>
:END:
#+BEGIN_SRC emacs-lisp
(defun kill-buffer-no-warning()
  (interactive)
  (with-simulated-input "y RET" (kill-buffer (current-buffer)))
  )

(defun kill-buffer-and-frame-no-warning ()
  (interactive)
  (kill-buffer-no-warning)
  (delete-frame)
  )
#+END_SRC

***** COMMENT auto adjust width 
:PROPERTIES:
:CREATED:  <2019-03-26 mar. 16:27>
:END:
#+BEGIN_SRC emacs-lisp
(defun term-resize-width()
    (set (make-local-variable 'term-width) (window-max-chars-per-line))
    ;;(term-reset-size (window-body-height) (window-max-chars-per-line))
  )

(defun term-send-input-set-width()
  (interactive)
  (message "resizing")
  (term-resize-width)
  (term-send-input)
  )


;; (defun term-send-input-refresh-line()
;;   (interactive)
;;   (with-simulated-input "M-x C-g C-RET" (term-send-input))
;;   )


;; (defun term-send-input-refresh-raw()
;;   (interactive)
;;   (with-simulated-input "M-x C-g RET" (term-send-input))
;;   )
#+END_SRC

***** key bindgings arrangements
:PROPERTIES:
:CREATED:  <2019-03-11 lun. 14:01>
:END:
#+BEGIN_SRC emacs-lisp
(add-hook 'term-mode-hook
          (lambda ()
            (define-key term-raw-map (kbd "C-d") 'kill-buffer-and-frame-no-warning)
            (define-key term-mode-map (kbd "C-d") 'kill-buffer-and-frame-no-warning)
            (define-key term-raw-map (kbd "C-c <left>") 'windmove-left)
            ;; (define-key term-raw-map (kbd "C-c C-<left>") 'windmove-left)
            (define-key term-raw-map (kbd "C-c <right>") 'windmove-right)
            ;; (define-key term-raw-map (kbd "C-c C-<right>") 'windmove-right)
            ;; (define-key term-raw-map (kbd "C-x <left>") 'previous-buffer)
            ;; (define-key term-raw-map (kbd "C-x <right>") 'next-buffer)
            ;; (define-key term-raw-map (kbd "C-x C-<left>") 'previous-buffer)
            ;; (define-key term-raw-map (kbd "C-x C-<right>") 'next-buffer)
            (define-key term-mode-map (kbd "C-<up>") 'term-send-prior)
            (define-key term-mode-map (kbd "C-<down>") 'term-send-next)
            (define-key term-mode-map (kbd "M-<up>") 'backward-paragraph)
            (define-key term-mode-map (kbd "M-<down>") 'forward-paragraph)
            (define-key term-mode-map (kbd "<C-return>") 'term-send-input)
            (define-key term-mode-map (kbd "<RET>") 'newline)
	    (define-key term-raw-map (kbd "M-:") 'eval-expression)
	    (define-key term-raw-map (kbd "M-x") 'helm-M-x)
	    (define-key term-raw-map (kbd "<RET>") 'term-send-input)
            ))
#+END_SRC

***** COMMENT tryouts
:PROPERTIES:
:CREATED:  <2019-02-21 jeu. 15:41>
:END:
#+BEGIN_SRC emacs-lisp
(require 'term-mode)
;;(require 'term+)
#+END_SRC
*** Environnement
#+BEGIN_SRC emacs-lisp
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+END_SRC
*** COMMENT server
:PROPERTIES:
:CREATED:  <2019-02-15 ven. 13:23>
:END:
#+BEGIN_SRC emacs-lisp
(server-start)
#+END_SRC
*** i3
:PROPERTIES:
:CREATED:  <2019-02-21 jeu. 15:04>
:END:
**** COMMENT i3wm lib
:PROPERTIES:
:CREATED:  <2019-02-21 jeu. 15:04>
:END:
#+BEGIN_SRC emacs-lisp
(require 'i3wm)
#+END_SRC
*** Keybindings
**** teddd custom map
***** emacs
:PROPERTIES:
:CREATED:  <2019-03-15 ven. 12:06>
:END:
#+BEGIN_SRC emacs-lisp
(define-prefix-command 'teddd-map)

(global-set-key (kbd "C-Ã¹") 'teddd-map)

(define-key teddd-map (kbd "d") 'server-start)

(define-key teddd-map (kbd "g") 'customize-group)

(define-key teddd-map (kbd "n") 'make-frame)

(define-key teddd-map (kbd "R") 'eval-region)

(define-key teddd-map (kbd "f") 'find-file)

(define-key teddd-map (kbd "p") 'list-packages)

(define-key teddd-map (kbd "=") 'describe-char)
(define-key teddd-map (kbd "<mouse-1>") 'describe-char)
#+END_SRC
***** litterate
:PROPERTIES:
:CREATED:  <2019-03-15 ven. 12:04>
:END:
#+BEGIN_SRC emacs-lisp
(define-key teddd-map (kbd "s") 'ispell-region)

(define-key teddd-map (kbd "<tab>") 'show-two-children)

(defun read-mode()
  (interactive)
  (delete-other-windows)
  (multicolumn-split)
  (follow-mode 1)
  (next-line))

(define-key teddd-map (kbd "l") 'org-insert-link-global)
#+END_SRC
***** editing
:PROPERTIES:
:CREATED:  <2019-03-15 ven. 12:03>
:END:
#+BEGIN_SRC emacs-lisp
(define-key teddd-map (kbd "C") 'comment-or-uncomment-region)

(define-key teddd-map (kbd "k") 'kill-whole-line)

(define-key teddd-map (kbd "r") 'rectangle-mark-mode)

(defun capitalize-last-word()
  (interactive)
  (capitalize-word -1))

(define-key teddd-map (kbd "c") 'capitalize-last-word)

(defun flush-empty-lines()
  (interactive)
  (mark-whole-buffer)
  (flush-lines "^$"))
(define-key teddd-map (kbd "<backspace>") 'flush-empty-lines)

(define-key teddd-map (kbd "Â§") 'pair-last-word)

(define-key teddd-map (kbd "y") 'yas-describe-tables)

(define-key teddd-map (kbd "m") 'executable-chmod)
#+END_SRC
***** I/O
:PROPERTIES:
:CREATED:  <2019-03-15 ven. 12:01>
:END:
#+BEGIN_SRC emacs-lisp
(defun revert-buffer-force()
  (interactive)
  (with-simulated-input "y RET" (revert-buffer))
  )
(define-key teddd-map (kbd "<f5>") 'revert-buffer-force)
#+END_SRC
***** Find / Access
:PROPERTIES:
:CREATED:  <2019-03-15 ven. 12:02>
:END:
#+BEGIN_SRC emacs-lisp
(defun find-zshrc ()
  (interactive)
  (find-file "~/.zshrc"))
(define-key teddd-map (kbd "z") 'find-zshrc)


(defun facebook-events-open-browser()
  (interactive)
  (browse-url "https://www.facebook.com/events/calendar/"))
(define-key teddd-map (kbd "F") 'facebook-events-open-browser)

#+END_SRC
***** term
:PROPERTIES:
:CREATED:  <2019-03-15 ven. 12:00>
:END:
#+BEGIN_SRC emacs-lisp
(defun new-term()
  (interactive)
  (make-frame)
  (sane-term-create)
  )

(define-key teddd-map (kbd "x") 'new-term)
#+END_SRC
***** org-babel
:PROPERTIES:
:CREATED:  <2019-03-15 ven. 11:59>
:END:
#+BEGIN_SRC emacs-lisp
(define-key teddd-map (kbd "<up>") 'org-babel-previous-src-block)
(define-key teddd-map (kbd "<down>") 'org-babel-next-src-block)

(defun ob-insert-ipython-block()
  (interactive)
  (yas-expand-snippet (yas-lookup-snippet "ipython"))
  )

(defun ob-insert-elisp-block()
  (interactive)
  (yas-expand-snippet (yas-lookup-snippet "elisp"))
  )

(defun ob-insert-ipython-session-block()
  (interactive)
  (yas-expand-snippet (yas-lookup-snippet "obipythontemplate"))
  )

(define-key teddd-map (kbd "i") 'ob-insert-ipython-block)
(define-key teddd-map (kbd "I") 'ob-insert-ipython-session-block)
(define-key teddd-map (kbd "e") 'ob-insert-elisp-block)

;; (defun ob-comment-uncomment()
;;   (interactive)
;;   (org-edit-special)
;;   (comment-or-uncomment-region)
;;   (org-edit-src-exit)
;;   )

#+END_SRC

**** macros
#+BEGIN_SRC emacs-lisp
(fset 'ob-run-top-heading
   [?\C-c ?\C-u ?\C-c ?\C-u ?\C-c ?\C-u ?\C-c ?\C-u ?\C-c ?\C-u ?\C-c ?\C-u ?\C-c ?\C-u ?\C-c ?\C-u ?\C-c ?\C-v ?\C-s ?\C-u ?\C- ])
(define-key teddd-map (kbd "b") 'ob-run-top-heading)

(fset 'ob-toogle-comment
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("''" 0 "%d")) arg)))
(define-key teddd-map (kbd "C-c") 'ob-toogle-comment)
#+END_SRC

**** Global
#+BEGIN_SRC emacs-lisp
;; Comment / Uncomment Region
(global-set-key "\C-c\C-x\C-c" 'comment-or-uncomment-region)
;; comment line
(global-set-key "\C-c\C-x\C-c" 'comment-line)

;; Split windows fuzzy keystroke
(global-set-key (kbd "C-x C-<kp-2>") 'split-window-horizontally)
(global-set-key (kbd "C-x C-<kp-3>") 'split-window-vertically)
(global-set-key (kbd "C-x C-<kp-1>") 'delete-other-windows-vertically)

(defun kill-buffer-delete-frame()
  (interactive)
  (kill-this-buffer)
  (delete-frame)
  )

(global-set-key (kbd "C-x k") 'kill-this-buffer)
(global-set-key (kbd "C-x C-k") 'kill-buffer-delete-frame)

(define-key key-translation-map (kbd "<C-mouse-4>") (kbd "<up>"))
(define-key key-translation-map (kbd "<C-mouse-5>") (kbd "<down>"))
(global-set-key (kbd "<C-mouse-6>") 'left-char)
(global-set-key (kbd "<C-mouse-7>") 'right-char)

(global-set-key (kbd "<C-S-mouse-6>") 'previous-buffer)
(global-set-key (kbd "<C-S-mouse-7>") 'next-buffer)

(global-set-key (kbd "M-z") 'undo-tree-redo)
#+END_SRC

*** scroll
:PROPERTIES:
:CREATED:  <2019-03-12 mar. 14:34>
:END:
#+BEGIN_SRC emacs-lisp
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(sml-modeline-mode 1)
#+END_SRC
*** fringe
:PROPERTIES:
:CREATED:  <2019-03-12 mar. 14:51>
:END:
**** Activation 
:PROPERTIES:
:CREATED:  <2019-03-12 mar. 17:02>
:END:
#+BEGIN_SRC emacs-lisp
(set-fringe-mode 3)
#+END_SRC
**** Customization 
:PROPERTIES:
:CREATED:  <2019-03-12 mar. 17:02>
:END:
#+BEGIN_SRC emacs-lisp
(set-face-background 'fringe "black")
(toggle-indicate-empty-lines)
#+END_SRC
**** COMMENT Indicators
:PROPERTIES:
:CREATED:  <2019-03-13 mer. 12:35>
:END:
#+BEGIN_SRC emacs-lisp
(setq indicate-buffer-boundaries '((top . left) (t . right)))
(require 'indicators)
#+END_SRC
*** spelling
:PROPERTIES:
:CREATED:  <2019-03-27 mer. 14:10>
:END:
#+BEGIN_SRC emacs-lisp
(with-eval-after-load "ispell"
  (setq ispell-program-name "hunspell")
  (setq ispell-dictionary "en_GB,fr_FR,de_DE")
  ;; ispell-set-spellchecker-params has to be called
  ;; before ispell-hunspell-add-multi-dic will work
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic "en_GB,fr_FR,de_DE"))
#+END_SRC

** Navigation
*** Todo
**** TODO add hydras for navigation
***** between windows, buffers
***** iswitch, avy, ace jump, helm swoop
**** TODO learn about god mode
*** COMMENT treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs              3
          treemacs-deferred-git-apply-delay   0.5
          treemacs-display-in-side-window     t
          treemacs-file-event-delay           5000
          treemacs-file-follow-delay          0.2
          treemacs-follow-after-init          t
          treemacs-follow-recenter-distance   0.1
          treemacs-git-command-pipe           ""
          treemacs-goto-tag-strategy          'refetch-index
          treemacs-indentation                1
          treemacs-indentation-string         " "
          treemacs-is-never-other-window      nil
          treemacs-max-git-entries            5000
          treemacs-no-png-images              nil
          treemacs-no-delete-other-windows    t
          treemacs-project-follow-cleanup     nil
          treemacs-persist-file               (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-recenter-after-file-follow nil
          treemacs-recenter-after-tag-follow  nil
          treemacs-show-cursor                nil
          treemacs-show-hidden-files          t
          treemacs-silent-filewatch           nil
          treemacs-silent-refresh             nil
          treemacs-sorting                    'alphabetic-desc
          treemacs-space-between-root-nodes   t
          treemacs-tag-follow-cleanup         t
          treemacs-tag-follow-delay           1.5
          treemacs-width                      30
		  treemacs-position                   'right
		  )

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    (treemacs-resize-icons 15)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null (executable-find "python3"))))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)


#+END_SRC

*** code
  #+BEGIN_SRC emacs-lisp
  ;; package menu hook to highlight curent line
  (add-hook 'package-menu-mode-hook 'highline-mode)

  ;; smartscan : look for next expression like the one under the cursor
  (smartscan-mode 1)

  ;; beacon, highlight cursor when windows scroll
  (beacon-mode 1)

  ;; isearch backwards with q
  (global-unset-key "\C-q")
  (global-unset-key "\C-r")
  (global-set-key "\C-q" 'isearch-backward)
  (define-key isearch-mode-map "\C-q" 'isearch-repeat-backward)

  ;; split windows
  (global-set-key (kbd "C-x 3") 'split-window-below)
  (global-set-key (kbd "C-x <kp-3>") 'split-window-below)
  (global-set-key (kbd "C-x 2") 'split-window-right)
  (global-set-key (kbd "C-x <kp-2>") 'split-window-right)

  ;; picture mode : stay in column
  (setq scroll-conservatively most-positive-fixnum)

  ;; ACE jump : helm line
  ;; (require 'ace-jump-helm-line)
  ;; ;; enable idle execution for `helm-mini'
  ;; (ace-jump-helm-line-idle-exec-add 'helm-mini)
  ;; ;; enable hints preview
  ;; (ace-jump-helm-line-autoshow-mode +1)
  ;; ;; use `linum-mode' to show
  ;; (setq ace-jump-helm-line-autoshow-mode-use-linum t)
#+end_src
*** COMMENT visible marks
#+BEGIN_SRC emacs-lisp

      ;; visible marks
      (defface visible-mark-active ;; put this before (require 'visible-mark)
        '((((type tty) (class mono)))
          (t (:background "magenta"))) "")
      (setq visible-mark-max 2)
      (setq visible-mark-faces `(visible-mark-face1 visible-mark-face2))
      (require 'visible-mark)
      (global-visible-mark-mode 1)


#+END_SRC

*** ace jump / avy / helm swoop
#+BEGIN_SRC emacs-lisp
;helm-swoop
(global-set-key (kbd "C-S-s") 'helm-swoop)

;; access global mark ring
(global-set-key (kbd "C-x SPC") 'helm-all-mark-rings)

;; avy mode
(global-set-key (kbd "C-x <up>") 'avy-goto-line-above)
(global-set-key (kbd "C-x <down>") 'avy-goto-line-below)
(global-set-key (kbd "C-x C-<up>") 'avy-goto-line-above)
(global-set-key (kbd "C-x C-<down>") 'avy-goto-line-below)
#+END_SRC
*** windows
#+BEGIN_SRC emacs-lisp
    ;; multiframe window function
    ;; (global-set-key (kbd "C-c <left>") 'previous-multiframe-window)
    ;; (global-set-key (kbd "C-c <right>") 'next-multiframe-window)

    ;; navigate through windows : wind move
    ;; (when (fboundp 'windmove-default-keybindings)
    ;;   (windmove-default-keybindings))
    (defun set-windmove ()
      (interactive)
      (global-set-key (kbd "C-c <left>")  'windmove-left)
      (global-set-key (kbd "C-c <right>") 'windmove-right)
      (global-set-key (kbd "C-c <up>")    'windmove-up)
      (global-set-key (kbd "C-c <down>")  'windmove-down)
      ;; force org-mode to let windmove work in org-mode
      ;; (add-hook 'org-mode-hook (local-unset-key (kbd "C-c <left>")))
      ;; (add-hook 'org-mode-hook (local-unset-key (kbd "C-c <right>")))
      ;; (add-hook 'org-mode-hook (local-unset-key (kbd "C-c <up>")))
      ;; (add-hook 'org-mode-hook (local-unset-key (kbd "C-c <down>")))
      ;; (add-hook 'org-mode-hook (local-set-key (kbd "C-c <left>") 'windmove-left))
      ;; (add-hook 'org-mode-hook (local-set-key (kbd "C-c <right>") 'windmove-right))
      ;; (add-hook 'org-mode-hook (local-set-key (kbd "C-c <up>") 'windmove-up))
      ;; (add-hook 'org-mode-hook (local-set-key (kbd "C-c <down>") 'windmove-down))
      (global-set-key (kbd "C-c <C-left>")  'windmove-left)
      (global-set-key (kbd "C-c <C-right>") 'windmove-right)
      (global-set-key (kbd "C-c <C-up>")    'windmove-up)
      (global-set-key (kbd "C-c <C-down>")  'windmove-down))
    (set-windmove)

    ;; Make windmove work in org-mode:
    ;; (add-hook 'org-shiftup-final-hook 'windmove-up)
    ;; (add-hook 'org-shiftleft-final-hook 'windmove-left)
    ;; (add-hook 'org-shiftdown-final-hook 'windmove-down)
    ;; (add-hook 'org-shiftright-final-hook 'windmove-right)

    ;; multicolumn mode
    (require 'multicolumn)
    (multicolumn-global-mode 1)
    ;; follow mode
    (add-hook 'multicolumn-global-mode-hook 'follow-mode)

  #+END_SRC
*** which-key-mode
#+begin_src emacs-lisp
    ;; display keybindings
    (which-key-mode 1)
#+end_src
*** info "mode"
**** todo
***** TODO set it for the local key map
**** code
#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-)") "[")
#+END_SRC
*** rejeep
#+BEGIN_SRC emacs-lisp
    (defun swap-windows ()
      "If you have 2 windows, it swaps them."
      (interactive)
      (cond ((/= (count-windows) 2)
             (message "You need exactly 2 windows to do this."))
            (t
             (let* ((w1 (first (window-list)))
                    (w2 (second (window-list)))
                    (b1 (window-buffer w1))
                    (b2 (window-buffer w2))
                    (s1 (window-start w1))
                    (s2 (window-start w2)))
               (set-window-buffer w1 b2)
               (set-window-buffer w2 b1)
               (set-window-start w1 s2)
               (set-window-start w2 s1))))
      (other-window 1))
    (global-set-key (kbd "C-x x") 'swap-windows)

#+END_SRC
*** step 5 lines
#+BEGIN_SRC emacs-lisp

    (defun step-5-lines()
      (interactive)
      (next-line 5))

    (defun back-5-lines()
      (interactive)
      (previous-line 5))

    (define-key teddd-map (kbd "<down>") 'step-5-lines)
    (define-key teddd-map (kbd "<up>") 'back-5-lines)

#+END_SRC
*** indent tools
:PROPERTIES:
:CREATED:  <2019-03-11 lun. 18:00>
:END:
https://gitlab.com/emacs-stuff/indent-tools/

#+BEGIN_SRC emacs-lisp
(require 'indent-tools)
(global-set-key (kbd "C-c >") 'indent-tools-hydra/body)
(add-hook 'python-mode-hook
 (lambda () (define-key python-mode-map (kbd "C-c >") 'indent-tools-hydra/body))
)
#+END_SRC

** Org mode
*** Common use
#+begin_src emacs-lisp
;; ORG MODE
;;(load-file "~/elisp/org-mode/lisp/org.elc")
(add-to-list 'load-path "/home/teddd/elisp/org-mode/contrib/lisp" t)
(let ((default-directory  "~/.emacs.d/lisp/"))
  (normal-top-level-add-subdirs-to-load-path))
(require (quote org-install))
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key (kbd "C-c .") 'org-time-stamp)
(setq org-log-done t)
(add-hook 'org-mode-hook 'org-indent-mode)
;; retour Ã  la ligne
(add-hook 'org-mode-hook 'visual-line-mode)

;; Stuff found on John Wiegley blog http://newartisans.com/2007/08/using-org-mode-as-a-day-planner/
(require 'org-agenda)

;; calendar mode navigation : show entries with TAB and jump to it with RET
(defun org-agenda-switch ()
  (define-key org-agenda-mode-map [(tab)] 'org-agenda-recenter)
  (define-key org-agenda-mode-map [(?\r)] 'org-agenda-goto))
(eval-after-load "org" '(org-agenda-switch))

;; end of org-mode configuration code

#+end_src
*** logging
**** COMMENT in prop
#+BEGIN_SRC emacs-lisp
(defun insert-created-date(&rest ignore)
  (insert (format-time-string
       (concat "\nCREATED: "
           (cdr org-time-stamp-formats))
       ))
  (org-back-to-heading) ; in org-capture, this folds the entry; when inserting a heading, this moves point back to the heading line
  (move-end-of-line()) ; when inserting a heading, this moves point to the end of the line
  )


                    ; add to the org-capture hook
(add-hook 'org-capture-before-finalize-hook 
         #'insert-created-date
)

                    ; hook it to adding headings with M-S-RET
                    ; do not add this to org-insert-heading-hook, otherwise this also works in non-TODO items
                    ; and Org-mode has no org-insert-todo-heading-hook
(advice-add 'org-insert-todo-heading :after #'insert-created-date)
#+END_SRC
**** expiry mode
#+BEGIN_SRC emacs-lisp
(require 'org-expiry)
(add-hook 'org-insert-heading-hook 'org-expiry-insert-created)
#+END_SRC
**** hide properties
:PROPERTIES:
:CREATED:  <2019-01-03 jeu. 16:03>
:END:
#+BEGIN_SRC emacs-lisp
(defun org-cycle-hide-drawers (state)
  "Re-hide all drawers after a visibility state change."
  (when (and (derived-mode-p 'org-mode)
             (not (memq state '(overview folded contents))))
    (save-excursion
      (let* ((globalp (memq state '(contents all)))
             (beg (if globalp
                    (point-min)
                    (point)))
             (end (if globalp
                    (point-max)
                    (if (eq state 'children)
                      (save-excursion
                        (outline-next-heading)
                        (point))
                      (org-end-of-subtree t)))))
        (goto-char beg)
        (while (re-search-forward org-drawer-regexp end t)
          (save-excursion
            (beginning-of-line 1)
            (when (looking-at org-drawer-regexp)
              (let* ((start (1- (match-beginning 0)))
                     (limit
                       (save-excursion
                         (outline-next-heading)
                           (point)))
                     (msg (format
                            (concat
                              "org-cycle-hide-drawers:  "
                              "`:END:`"
                              " line missing at position %s")
                            (1+ start))))
                (if (re-search-forward "^[ \t]*:END:" limit t)
                  (outline-flag-region start (point-at-eol) t)
                  (user-error msg))))))))))
#+END_SRC
**** show them again ? 
:PROPERTIES:
:CREATED:  <2019-01-03 jeu. 16:20>
:END:
*** keybindings
#+BEGIN_SRC emacs-lisp
(fset 'org-beginning-of-headline
   "\C-c\C-b\C-c\C-f")
(define-key org-mode-map (kbd "C-c Ã¹") 'org-beginning-of-headline)
(define-key org-mode-map (kbd "C-c <left>") 'windmove-left)
(define-key org-mode-map (kbd "C-c <right>") 'windmove-right)
(define-key org-mode-map (kbd "C-c <C-right>") 'org-shiftright)
(define-key org-mode-map (kbd "C-c <C-left>") 'org-shiftleft)
#+END_SRC

*** agenda
:PROPERTIES:
:CREATED:  <2018-12-29 sam. 18:44>
:END:
#+BEGIN_SRC emacs-lisp
(require 'german-holidays)
(setq calendar-holidays holiday-german-BE-holidays)
'(org-agenda-include-diary t)
#+END_SRC

*** refile
#+BEGIN_SRC emacs-lisp
    ;; refile targets
    (defun +org/opened-buffer-files ()
      "Return the list of files currently opened in emacs"
      (delq nil
            (mapcar (lambda (x)
                      (if (and (buffer-file-name x)
                               (string-match "\\.org$"
                                             (buffer-file-name x)))
                          (buffer-file-name x)))
                    (buffer-list))))

    (setq org-refile-targets '((+org/opened-buffer-files :maxlevel . 9)))

    ;; use outline path
    (setq org-refile-use-outline-path 'file)
    ;; makes org-refile outline working with helm/ivy
    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC

*** inline images size
:PROPERTIES:
:CREATED:  <2019-01-17 jeu. 16:49>
:END:
#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width 600)
#+END_SRC

*** My hooks
**** COMMENT percentage
#+BEGIN_SRC emacs-lisp
    ;; shortcut for percentage
    (defun add-percentage ()
      "Add percentage at the end of the line"
      (interactive)
      (org-end-of-line)
      (insert " [%]"))
#+END_SRC
**** cycle two children
#+BEGIN_SRC emacs-lisp
    ;; show 2 children headings
    (defun show-two-children ()
      "Sows 2 levels of descendents of the active heading"
      (interactive)
      (outline-show-children 2))
#+END_SRC
**** TODO COMMENT cycle n children
#+BEGIN_SRC emacs-lisp
    ;; show n children headings
    (defun show-n-children (n)
      "Sows n levels of descendents of the active heading"
      (interactive)
      (outline-show-children n))
#+END_SRC
**** todo
***** TODO add local key bindings after org hook
*** Fonts
#+BEGIN_SRC emacs-lisp
    (require 'org-bullets)
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC
*** clocking
#+BEGIN_SRC emacs-lisp
    (setq org-clock-persist 'history)
    (org-clock-persistence-insinuate)
#+END_SRC
*** todo sequence
#+BEGIN_SRC emacs-lisp
    (setq org-todo-keywords
          '((sequence "TODO(t)" "ASK(a)" "|" "DONE(d)")))
#+END_SRC
*** calendar motion
#+BEGIN_SRC emacs-lisp
(define-key org-read-date-minibuffer-local-map (kbd "<left>") (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-day 1))))
(define-key org-read-date-minibuffer-local-map (kbd "<right>") (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-day 1))))
(define-key org-read-date-minibuffer-local-map (kbd "<up>") (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-week 1))))
(define-key org-read-date-minibuffer-local-map (kbd "<down>") (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-week 1))))
(define-key org-read-date-minibuffer-local-map (kbd "S-<left>") (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-month 1))))
(define-key org-read-date-minibuffer-local-map (kbd "S-<right>") (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-month 1))))
(define-key org-read-date-minibuffer-local-map (kbd "S-<up>")  (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-year 1))))
(define-key org-read-date-minibuffer-local-map (kbd "S-<down>") (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-year 1))))
#+END_SRC
*** COMMENT hiding drawers
credits : https://stackoverflow.com/questions/17478260/completely-hide-the-properties-drawer-in-org-mode

todo : make it visible again + include in cycle

#+BEGIN_SRC emacs-lisp
    (defun org-cycle-hide-drawers (state)
      "Re-hide all drawers after a visibility state change."
      (when (and (derived-mode-p 'org-mode)
                 (not (memq state '(overview folded contents))))
        (save-excursion
          (let* ((globalp (memq state '(contents all)))
                 (beg (if globalp
                        (point-min)
                        (point)))
                 (end (if globalp
                        (point-max)
                        (if (eq state 'children)
                          (save-excursion
                            (outline-next-heading)
                            (point))
                          (org-end-of-subtree t)))))
            (goto-char beg)
            (while (re-search-forward org-drawer-regexp end t)
              (save-excursion
                (beginning-of-line 1)
                (when (looking-at org-drawer-regexp)
                  (let* ((start (1- (match-beginning 0)))
                         (limit
                           (save-excursion
                             (outline-next-heading)
                               (point)))
                         (msg (format
                                (concat
                                  "org-cycle-hide-drawers:  "
                                  "`:END:`"
                                  " line missing at position %s")
                                (1+ start))))
                    (if (re-search-forward "^[ \t]*:END:" limit t)
                      (outline-flag-region start (point-at-eol) t)
                      (user-error msg))))))))))

#+END_SRC
*** COMMENT org mind map

Loading doesn't seam to work right yet. Package works, but makes the init crash.
Solution: put the code in another file ? force-load function ?

When running org-mind-map-write, special characters seem to make the code bug.
Sol : Convert files to unicode as a before hook ?
To learn : different encodings types.

#+BEGIN_SRC emacs-lisp
    (load "~/.emacs.d/org-mind-map/org-mind-map.el")
#+END_SRC

*** COMMENT from scimax
#+BEGIN_SRC emacs-lisp
    (setq org-src-window-setup 'current-window
          org-support-shift-select t)
    (use-package org-edna
      :init (org-edna-load))
#+END_SRC
*** COMMENT Brain
#+BEGIN_SRC emacs-lisp
    (require (quote org-brain))
#+END_SRC
*** apostrophes
**** COMMENT maybe
https://www.emacswiki.org/emacs/OpeningQuote
#+BEGIN_SRC emacs-lisp
(defun maybe-open-apostrophe ()
  "When called, insert an ` or a ' as appropriate.
    When called after a space, insert a `.
    When called after a `, replace it with a '.
    Else insert a '."
  (interactive)
  (cond ((or (= (point) (point-min))
             (= (char-before) ? )
             (= (point) (line-beginning-position)))
         (insert "`"))
        ((= (char-before) ?`)
         (delete-char -1)
         (insert "'"))
        (t
         (insert "'"))))
(global-set-key (kbd "'") 'maybe-open-apostrophe)
#+END_SRC
**** do!
#+BEGIN_SRC emacs-lisp
(defun do-open-apostrophe ()
  "When called, insert insert a '."
  (interactive)
  (insert "'"))
(global-set-key (kbd "'") 'do-open-apostrophe)
#+END_SRC
*** COMMENT goto end of a headline content
#+BEGIN_SRC emacs-lisp

    (defun goto-end-of-headline-content()
      (interactive)
      )

#+END_SRC
*** COMMENT German holidays
#+BEGIN_SRC emacs-lisp
    (setq calendar-holidays holiday-german-holidays)
#+END_SRC
*** COMMENT Log everything
#+BEGIN_SRC emacs-lisp
(defun org-add-logging-info (what &optional time &rest remove)
  "Insert new timestamp with keyword in the planning line.
WHAT indicates what kind of time stamp to add.  It is a symbol
among `closed', `deadline', `scheduled' and nil.  TIME indicates
the time to use.  If none is given, the user is prompted for
a date.  REMOVE indicates what kind of entries to remove.  An old
WHAT entry will also be removed."
  (let (org-time-was-given org-end-time-was-given default-time default-input)
    (catch 'exit
      (when (and (memq what '(scheduled deadline))
		 (or (not time)
		     (and (stringp time)
			  (string-match "^[-+]+[0-9]" time))))
	;; Try to get a default date/time from existing timestamp
	(save-excursion
	  (org-back-to-heading t)
	  (let ((end (save-excursion (outline-next-heading) (point))) ts)
	    (when (re-search-forward (if (eq what 'scheduled)
 					 org-scheduled-time-regexp
				       org-deadline-time-regexp)
				     end t)
	      (setq ts (match-string 1)
		    default-time (apply 'encode-time (org-parse-time-string ts))
		    default-input (and ts (org-get-compact-tod ts)))))))
      (when what
	(setq time
	      (if (stringp time)
		  ;; This is a string (relative or absolute), set
		  ;; proper date.
		  (apply #'encode-time
			 (org-read-date-analyze
			  time default-time (decode-time default-time)))
		;; If necessary, get the time from the user
		(or time (org-read-date nil 'to-time nil nil
					default-time default-input)))))

      (org-with-wide-buffer
       (org-back-to-heading t)
       (forward-line)
       (unless (bolp) (insert "\n"))
       (cond ((looking-at-p org-planning-line-re)
	      ;; Move to current indentation.
	      (skip-chars-forward " \t")
	      ;; Check if we have to remove something.
	      (dolist (type (if what (cons what remove) remove))
		(save-excursion
		  (when (re-search-forward
			 (cl-case type
			   (closed org-closed-time-regexp)
			   (deadline org-deadline-time-regexp)
			   (scheduled org-scheduled-time-regexp)
			   (otherwise
			    (error "Invalid planning type: %s" type)))
			 (line-end-position) t)
		    ;; Delete until next keyword or end of line.
		    (delete-region
		     (match-beginning 0)
		     (if (re-search-forward org-keyword-time-not-clock-regexp
					    (line-end-position)
					    t)
			 (match-beginning 0)
		       (line-end-position))))))
	      ;; If there is nothing more to add and no more keyword
	      ;; is left, remove the line completely.
	      (if (and (looking-at-p "[ \t]*$") (not what))
		  (delete-region (line-beginning-position)
				 (line-beginning-position 2))
		;; If we removed last keyword, do not leave trailing
		;; white space at the end of line.
		(let ((p (point)))
		  (save-excursion
		    (end-of-line)
		    (unless (= (skip-chars-backward " \t" p) 0)
		      (delete-region (point) (line-end-position)))))))
	     ((not what) (throw 'exit nil)) ; Nothing to do.
	     (t (insert-before-markers "\n")
		(backward-char 1)
		(when org-adapt-indentation
		  (indent-to-column (1+ (org-outline-level))))))
       (when what
	 ;; Insert planning keyword.
	 (insert (cl-case what
		   (closed org-closed-string)
		   (deadline org-deadline-string)
		   (scheduled org-scheduled-string)
		   (otherwise (error "Invalid planning type: %s" what)))
		 " ")
	 ;; Insert associated timestamp.
	 (let ((ts (org-insert-time-stamp
		    time
		    (or org-time-was-given
			(and (eq what 'closed) org-log-done-with-time))
		    (eq what 'closed)
		    nil nil (list org-end-time-was-given))))
	   (unless (eolp) (insert " "))
	   ts))))))

#+END_SRC
*** COMMENT Markup empahsis redefiniton
:PROPERTIES:
:CREATED:  <2019-01-16 mer. 11:34>
:END:
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-emphasis-alist
             '("!" (:foreground "red")
               ))
#+END_SRC

*** Org export
**** latex
***** reset
#+BEGIN_SRC emacs-lisp
(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))
#+END_SRC
***** classes
****** assignement
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes
             '("assignment"
                   "\\documentclass[11pt,a4paper]{article}
\\usepackage[utf8]{inputenc}
\\usepackage[T1]{fontenc}
\\usepackage{fixltx2e}
\\usepackage{graphicx}
\\usepackage{longtable}
\\usepackage{float}
\\usepackage{wrapfig}
\\usepackage{rotating}
\\usepackage[normalem]{ulem}
\\usepackage{amsmath}
\\usepackage{textcomp}
\\usepackage{marvosym}
\\usepackage{wasysym}
\\usepackage{amssymb}
\\usepackage{hyperref}
\\usepackage{mathpazo}
\\usepackage{color}
\\usepackage{enumerate}
\\definecolor{bg}{rgb}{0.95,0.95,0.95}
\\tolerance=1000
      [NO-DEFAULT-PACKAGES]
      [PACKAGES]
      [EXTRA]
\\linespread{1.1}
\\hypersetup{pdfborder=0 0 0}"
("\\section{%s}" . "\\section*{%s}")
("\\subsection{%s}" . "\\subsection*{%s}")
("\\subsubsection{%s}" . "\\subsubsection*{%s}")
("\\paragraph{%s}" . "\\paragraph*{%s}")))
#+END_SRC
****** ebook
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes '("ebook"
"\\documentclass[11pt, oneside]{memoir}
\\setstocksize{9in}{6in}
\\settrimmedsize{\\stockheight}{\\stockwidth}{*}
\\setlrmarginsandblock{2cm}{2cm}{*} % Left and right margin
\\setulmarginsandblock{2cm}{2cm}{*} % Upper and lower margin
\\checkandfixthelayout
% Much more laTeX code omitted
"
("\\chapter{%s}" . "\\chapter*{%s}")
("\\section{%s}" . "\\section*{%s}")
("\\subsection{%s}" . "\\subsection*{%s}")
))
#+END_SRC
****** org-article
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes
      '("org-article"
         "\\documentclass{org-article}
         [NO-DEFAULT-PACKAGES]
         [PACKAGES]
         [EXTRA]"
         ("\\section{%s}" . "\\section*{%s}")
         ("\\subsection{%s}" . "\\subsection*{%s}")
         ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
         ("\\paragraph{%s}" . "\\paragraph*{%s}")
         ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC
****** evalux
#+BEGIN_EXAMPLE
(add-to-list 'org-latex-classes
      '("evalux-tb"
         "\\documentclass{evalux-tb}
         [NO-DEFAULT-PACKAGES]
         [PACKAGES]
         [EXTRA]"
         ("\\section{%s}" . "\\section*{%s}")
         ("\\subsection{%s}" . "\\subsection*{%s}")
         ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
         ("\\paragraph{%s}" . "\\paragraph*{%s}")
         ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_EXAMPLE
** Editing
*** code
#+BEGIN_SRC emacs-lisp
;; kill region
(global-set-key (kbd "C-w") 'kill-region)
;; undo
(global-unset-key "\C-z")
(global-set-key "\C-z" 'undo)
;; select word
(fset 'select-word
      [C-left ?\C-  C-right])
(global-set-key "\C-cw" 'select-word)
;; select line
(fset 'select-line
      [?\C-a ?\C-  ?\C-e])
(global-set-key "\C-cs" 'select-line)
;; select paragraph
(fset 'select-paragraph
      [C-down C-up down ?\C-  C-down left])
(global-set-key "\C-c\C-s" 'select-paragraph)

;; kill to next word but with parentheses
;; copy line
(defun copy-line()
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank))
(global-set-key "\C-c\C-c" 'copy-line)
;; duplicate line
(defun duplicate-line()
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank))
    (global-set-key (kbd "C-c d") 'duplicate-line)
;; yank with !
(global-set-key (kbd "C-!") 'yank)
;; company mode
(add-hook 'after-init-hook 'global-company-mode)
;; (company-quickhelp-mode)
;; electricity
(electric-pair-mode 1)
(electric-quote-mode 1)
;; move line
(global-set-key (kbd "M-<up>") 'move-line-up)
(global-set-key (kbd "M-<down>") 'move-line-down)
;; undo tree
(global-undo-tree-mode)
;; indent
(global-set-key (kbd "RET") 'newline-and-indent)
(global-set-key (kbd "C-c i") 'indent-region)
;; highlight parentheses
(define-globalized-minor-mode global-highlight-parentheses-mode
  highlight-parentheses-mode
  (lambda ()
    (highlight-parentheses-mode t)))
(global-highlight-parentheses-mode t)
;; auto indent
(require 'auto-indent-mode)
;; expand region
(global-set-key (kbd "C-$") 'er/expand-region)
;; embrace : expanded regions editing
(global-set-key (kbd "M-$") #'embrace-add)
(add-hook 'org-mode-hook #'embrace-org-mode-hook)
(delete-selection-mode 1)
#+END_SRC
*** COMMENT drag stuff
#+BEGIN_SRC emacs-lisp
    ;; Then require drag-stuff
    (require 'drag-stuff)

    ;; To start drag-stuff
    ;; (drag-stuff-mode t) or M-x drag-stuff-mode
    ;;
    ;; drag-stuff is buffer local, so hook it up
    ;; (add-hook 'ruby-mode-hook 'drag-stuff-mode)
    ;;
    ;; Or use the global mode to activate it in all buffers.
    (drag-stuff-global-mode t)
    (global-auto-revert-mode 1)
    (add-hook 'org-mode-hook (drag-stuff-mode 0))
#+END_SRC
*** magit
#+BEGIN_SRC emacs-lisp
;; Git in Emacs
(require 'magit)
(global-set-key (kbd "C-x g") 'magit)
(global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
(setq global-magit-file-mode t)

(add-hook 'after-save-hook 'magit-after-save-refresh-status)
(setq magit-auto-revert-mode nil)
(setq global-auto-revert-mode t)
#+END_SRC
*** smart hungry whitespace
#+BEGIN_SRC emacs-lisp

    (require 'smart-hungry-delete)
    (global-set-key (kbd "<backspace>") 'smart-hungry-delete-backward-char)
    (global-set-key (kbd "C-d") 'smart-hungry-delete-forward-char)

#+END_SRC
*** snippets
**** yasnippet
:PROPERTIES:
:CREATED:  <2019-02-14 jeu. 14:17>
:END:
#+BEGIN_SRC emacs-lisp
(yas-global-mode)
(define-key yas-minor-mode-map (kbd "<tab>") nil)
(define-key yas-minor-mode-map (kbd "TAB") nil)
(define-key yas-minor-mode-map (kbd "C-c <tab>") yas-maybe-expand)
#+END_Src
**** COMMENT auto yasnippets
:PROPERTIES:
:CREATED:  <2019-02-14 jeu. 14:17>
:END:
https://github.com/abo-abo/auto-yasnippet
#+BEGIN_SRC emacs-lisp
(require 'auto-yasnippet)
(global-set-key (kbd "C-c k") 'aya-create)
(define-key org-mode-map (kbd "C-c !") nil)
(global-set-key (kbd "C-c !") 'aya-expand)
#+END_SRC
**** TODO COMMENT ivy-yasnippet
:PROPERTIES:
:CREATED:  <2019-02-14 jeu. 15:07>
:END:
https://github.com/mkcms/ivy-yasnippet
#+BEGIN_SRC emacs-lisp

#+END_SRC

*** backup
**** documentation
backup-each-save is an available package.

     Status: Available from melpa -- Install
    Archive: melpa
    Version: 20180227.557
     Commit: 3c414b9d6b278911c95c5b8b71819e6af6f8a02a
    Summary: backup each savepoint of a file

Ever wish to go back to an older saved version of a file?  Then
this package is for you.  This package copies every file you save
in Emacs to a backup directory tree (which mirrors the tree
structure of the filesystem), with a timestamp suffix to make
multiple saves of the same file unique.  Never lose old saved
versions again.

To activate globally, place this file in your `load-path', and add
the following lines to your ~/.emacs file:

(require 'backup-each-save)
(add-hook 'after-save-hook 'backup-each-save)

To activate only for individual files, add the require line as
above to your ~/.emacs, and place a local variables entry at the
end of your file containing the statement:

eval: (add-hook (make-local-variable 'after-save-hook) 'backup-each-save)

NOTE:  I would give a full example of how to do this here, but it
would then try to activate it for this file since it is a short
file and the docs would then be within the "end of the file" local
variables region.  :)

To filter out which files it backs up, use a custom function for
`backup-each-save-filter-function'.  For example, to filter out
the saving of gnus .newsrc.eld files, do:

(defun backup-each-save-no-newsrc-eld (filename)
  (cond
   ((string= (file-name-nondirectory filename) ".newsrc.eld") nil)
   (t t)))
(setq backup-each-save-filter-function 'backup-each-save-no-newsrc-eld)

[back]

**** backup-each-save
#+BEGIN_SRC emacs-lisp
(require 'backup-each-save)
(add-hook 'after-save-hook 'backup-each-save)
(defun backup-each-save-filter (filename)
  (let ((ignored-filenames
    	 '("^/tmp" "semantic.cache$" "\\.emacs-places$"
    	   "\\.recentf$" ".newsrc\\(\\.eld\\)?"))
    	(matched-ignored-filename nil))
    (mapc
     (lambda (x)
       (when (string-match x filename)
    	 (setq matched-ignored-filename t)))
     ignored-filenames)
    (not matched-ignored-filename)))
(setq backup-each-save-filter-function 'backup-each-save-filter)
#+END_SRC

*** tabulation key / indentation 
set default to this value ? Add to customize variables
#+BEGIN_SRC emacs-lisp
(setq tab-stop-list (number-sequence 4 120 4))
#+END_SRC

*** COMMENT multiple cursors
#+BEGIN_SRC emacs-lisp
(require 'multiple-cursors)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-unset-key (kbd "C-c C-<"))
(define-key org-mode-map (kbd "C-c C-<") nil)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
(define-key mc/keymap (kbd "<return>") nil)
#+END_SRC

*** subwords (camelCase, snake_words, etc.)
:PROPERTIES:
:CREATED:  <2019-02-11 lun. 15:18>
:END:
#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
#+END_SRC
** Programming
*** vc 
:PROPERTIES:
:CREATED:  <2019-05-14 mar. 15:10>
:END:
**** commit on save
:PROPERTIES:
:CREATED:  <2019-05-14 mar. 15:10>
:END:

further resources: https://superuser.com/questions/132218/emacs-git-auto-commit-every-5-minutes
https://emacs.stackexchange.com/questions/19637/predicate-function-to-test-if-file-is-under-version-control

fine tune the conditions to differenciate new files under vc and files out. Use vc-git-responsible-p and vc-registred

#+BEGIN_SRC emacs-lisp
(defmacro minibuffer-quit-and-run (&rest body)
  "Quit the minibuffer and run BODY afterwards."
  `(progn
     (run-at-time nil nil
                  (lambda ()
                    (put 'quit 'error-message "Quit")
                    ,@body))
     (minibuffer-keyboard-quit)))

(defun my-commit-on-save ()
  "commit the buffer"
  (message (buffer-name))
  (setq save-buffer (buffer-name))
  (if (vc-git-responsible-p (buffer-name))
	  (minibuffer-quit-and-run
	   (message save-buffer)
	   (with-current-buffer save-buffer
		 (call-interactively 'vc-next-action)
		 )
	   )
	)
  )

(add-hook 'after-save-hook 'my-commit-on-save)
#+END_SRC

*** Projectile
#+BEGIN_SRC emacs-lisp
(projectile-mode +1)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
(global-set-key (kbd "C-c b") 'helm-projectile)
(setq projectile-project-search-path '("~"))
#+END_SRC
*** elisp
#+BEGIN_SRC emacs-lisp

    (define-key emacs-lisp-mode-map (kbd "C-c C-b") 'eval-buffer)

#+END_SRC
*** Python
**** elpy
#+begin_src emacs-lisp
(elpy-enable)
(setq elpy-rpc-python-command "python3"
      python-shell-interpreter "ipython3"
      python-shell-interpreter-args "-i --simple-prompt")
(define-key elpy-mode-map (kbd "C-c k") 'eply-shell-kill)
;; hooks
(add-hook 'python-mode-hook
          (lambda ()
            (setq-default indent-tabs-mode t)
            (setq-default tab-width 4)
            (setq-default py-indent-tabs-mode t)
            ))
;; python shell hook
(add-hook 'inferior-python-mode-hook (beacon-mode 0))

    #+end_src
**** COMMENT ein
    #+begin_src emacs-lisp
    (require 'ein)
#+end_src
**** COMMENT virtualenwrapper
#+BEGIN_SRC emacs-lisp
    (require 'virtualenvwrapper)
    (venv-initialize-interactive-shells) ;; if you want interactive shell support
    (venv-initialize-eshell) ;; if you want eshell support
    ;; note that setting `venv-location` is not necessary if you
    ;; use the default location (`~/.virtualenvs`), or if the
    ;; the environment variable `WORKON_HOME` points to the right place
    (setq venv-location "~/.virtualenvs")

    (add-hook 'venv-postmkvirtualenv-hook
              (lambda () (shell-command "pip install nose flake8 jedi")))

#+END_SRC
**** pyenv
***** keymap
#+BEGIN_SRC emacs-lisp
(defconst pyenv-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "C-c v") 'pyenv-mode-set)
    (define-key map (kbd "C-c u") 'pyenv-mode-unset)
    map)
  "Keymap for pyenv-mode.")
#+END_SRC

***** activation
#+BEGIN_SRC emacs-lisp
(pyenv-mode)
#+END_SRC
***** switch for each projectile project
#+BEGIN_SRC emacs-lisp
(require 'pyenv-mode)
(defun projectile-pyenv-mode-set ()
  "Set pyenv version matching project name."
  (let ((project (projectile-project-name)))
    (if (member project (pyenv-mode-versions))
        (pyenv-mode-set project)
      (pyenv-mode-unset))))

(add-hook 'projectile-after-switch-project-hook 'projectile-pyenv-mode-set)
#+END_SRC
**** COMMENT anaconda
#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'anaconda-mode)
(add-hook 'python-mode-hook 'anaconda-eldoc-mode)
#+END_SRC
**** COMMENT flymake
:PROPERTIES:
:CREATED:  <2019-03-22 ven. 15:02>
:END:
#+BEGIN_SRC emacs-lisp
(when (load "flymake" t)
 (defun flymake-pylint-init ()
   (let* ((temp-file (flymake-init-create-temp-buffer-copy
                      'flymake-create-temp-inplace))
          (local-file (file-relative-name
                       temp-file
                       (file-name-directory buffer-file-name))))
         (list "pep8.py" (list "--repeat" local-file))))

 (add-to-list 'flymake-allowed-file-name-masks
              '("\\.py\\'" flymake-pylint-init)))
#+END_SRC
*** web
**** Javascript
***** JavaScript
#+begin_src emacs-lisp
    ;;js2
    (require 'js2-mode)
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    (add-hook 'js2-mode-hook #'js2-imenu-extras-mode)
    ;;js2-refractor
    (require 'js2-refactor)
    (add-hook 'js2-mode-hook #'js2-refactor-mode)
    (js2r-add-keybindings-with-prefix "C-c C-m") ;; eg. extract function with `C-c C-m ef`
    (define-key js2-mode-map (kbd "C-k") #'js2r-kill)
    ;;xref-js2 TODO : make these p5 projets VC projects (git, svn, etc.)
    (require 'xref-js2)
    (define-key js2-mode-map (kbd "M-.") nil)
    (add-hook 'js2-mode-hook (lambda ()
                               (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))
#+end_src
**** Beautify
#+BEGIN_SRC emacs-lisp
(eval-after-load 'js2-mode
  '(define-key js2-mode-map (kbd "C-c b") 'web-beautify-js))
;; Or if you're using 'js-mode' (a.k.a 'javascript-mode')
(eval-after-load 'js
  '(define-key js-mode-map (kbd "C-c b") 'web-beautify-js))

(eval-after-load 'json-mode
  '(define-key json-mode-map (kbd "C-c b") 'web-beautify-js))

(eval-after-load 'sgml-mode
  '(define-key html-mode-map (kbd "C-c b") 'web-beautify-html))

(eval-after-load 'web-mode
  '(define-key web-mode-map (kbd "C-c b") 'web-beautify-html))

(eval-after-load 'css-mode
  '(define-key css-mode-map (kbd "C-c b") 'web-beautify-css))
#+END_SRC
*** Markup Languages
:PROPERTIES:
:CREATED:  <2019-03-21 jeu. 13:34>
:END:
**** PSGML
:PROPERTIES:
:CREATED:  <2019-03-21 jeu. 13:35>
:END:
#+BEGIN_SRC emacs-lisp
(setq sgml-set-face t)
(setq sgml-auto-activate-dtd t)
(setq sgml-indent-data t)
#+END_SRC

*** Org Babel
**** setup
#+begin_src emacs-lisp
;; Babel
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
(defun toogle-src-fonts ()
  "Set native fonts for src blocks or leave it grey"
  (interactive)
  ((lambda
     (if (org-src-fontify-natively)
         (setq org-src-fontify-natively nil)
       (setq org-src-fontify-natively t)
       ))))

(defun org-babel-split-block-maybe (&optional arg)
  "Split the current source code block on the cursor."
  (interactive "p")
  ((lambda (info)
     (if info
         (let ((lang (nth 0 info))
               (indent (nth 6 info))
               (stars (make-string (org-current-level) ?*)))
           (insert (concat (if (looking-at "^") "" "\n")
                           (make-string indent ? ) "#+end_src\n"
                           (if arg stars (make-string indent ? )) "\n"
                           (make-string indent ? ) "#+begin_src " lang
                           (if (looking-at "[\n\r]") "" "\n  "))))
       (message "Not in src block.")))
   (org-babel-get-src-block-info)))

(require 'ob-async)
         #+end_src
**** COMMENT key prefix
#+BEGIN_SRC emacs-lisp
(defconst org-babel-key-prefix (kbd "C-*"))
#+END_SRC

**** COMMENT indent src code blocks
         #+begin_src emacs-lisp
    (defun indent-src-blocks ()
        "Indent current block and goes to next"
        (interactive)
    (indent-region (org-babel-mark-block))
    (org-babel-next-src-block)
    )
  #+end_src
**** COMMENT J Kitchin
***** COMMENT language mode keybinds in src blocks
#+BEGIN_SRC emacs-lisp
        (setq scimax-src-block-keymaps
              `(("ipython" . ,(let ((map (make-composed-keymap
                                          `(,elpy-mode-map ,python-mode-map ,pyvenv-mode-map)
                                          org-mode-map)))
                                ;; In org-mode I define RET so we f
                                (define-key map (kbd "<return>") 'newline)
                                (define-key map (kbd "C-c C-c") 'org-ctrl-c-ctrl-c)
                                map))
                ("python" . ,(let ((map (make-composed-keymap
                                         `(,elpy-mode-map ,python-mode-map ,pyvenv-mode-map)
                                         org-mode-map)))
                               ;; In org-mode I define RET so we f
                               (define-key map (kbd "<return>") 'newline)
                               (define-key map (kbd "C-c C-c") 'org-ctrl-c-ctrl-c)
                               map))
                ("emacs-lisp" . ,(let ((map (make-composed-keymap `(,emacs-lisp-mode-map
                                                                    ,outline-minor-mode-map)
                                                                  org-mode-map)))
                                   (define-key map (kbd "C-c C-c") 'org-ctrl-c-ctrl-c)
                                   map))))

        (defun scimax-add-keymap-to-src-blocks (limit)
          "Add keymaps to src-blocks defined in `scimax-src-block-keymaps'."
          (let ((case-fold-search t)
                lang)
            (while (re-search-forward org-babel-src-block-regexp limit t)
              (let ((lang (match-string 2))
                    (beg (match-beginning 0))
                    (end (match-end 0)))
                (if (assoc (org-no-properties lang) scimax-src-block-keymaps)
                    (progn
                      (add-text-properties
                       beg end `(local-map ,(cdr (assoc
                                                  (org-no-properties lang)
                                                  scimax-src-block-keymaps))))
                      ))))))

        (define-minor-mode scimax-src-keymap-mode
          "Minor mode to add mode keymaps to src-blocks."
          :init-value nil
          (if scimax-src-keymap-mode
              (progn
                (add-hook 'org-font-lock-hook #'scimax-add-keymap-to-src-blocks t)
                (add-to-list 'font-lock-extra-managed-props 'local-map)
                (add-to-list 'font-lock-extra-managed-props 'cursor-sensor-functions)
                (cursor-sensor-mode +1))
            (remove-hook 'org-font-lock-hook #'scimax-add-keymap-to-src-blocks)
            (cursor-sensor-mode -1))
          (font-lock-fontify-buffer))

        (add-hook 'org-mode-hook (lambda ()
                                   (scimax-src-keymap-mode +1)))
#+END_SRC
***** resume sessions
#+BEGIN_SRC emacs-lisp
    (defun src-block-in-session-p (&optional name)
      "Return if src-block is in a session of NAME.
    NAME may be nil for unnamed sessions."
      (let* ((info (org-babel-get-src-block-info))
             (lang (nth 0 info))
             (body (nth 1 info))
             (params (nth 2 info))
             (session (cdr (assoc :session params))))

        (cond
         ;; unnamed session, both name and session are nil
         ((and (null session)
               (null name))
          t)
         ;; Matching name and session
         ((and
           (stringp name)
           (stringp session)
           (string= name session))
          t)
         ;; no match
         (t nil))))

    (defun org-babel-restart-session-to-point (&optional arg)
      "Restart session up to the src-block in the current point.
    Goes to beginning of buffer and executes each code block with
    `org-babel-execute-src-block' that has the same language and
    session as the current block. ARG has same meaning as in
    `org-babel-execute-src-block'."
      (interactive "P")
      (unless (org-in-src-block-p)
        (error "You must be in a src-block to run this command"))
      (let* ((current-point (point-marker))
             (info (org-babel-get-src-block-info))
             (lang (nth 0 info))
             (params (nth 2 info))
             (session (cdr (assoc :session params))))
        (save-excursion
          (goto-char (point-min))
          (while (re-search-forward org-babel-src-block-regexp nil t)
            ;; goto start of block
            (goto-char (match-beginning 0))
            (let* ((this-info (org-babel-get-src-block-info))
                   (this-lang (nth 0 this-info))
                   (this-params (nth 2 this-info))
                   (this-session (cdr (assoc :session this-params))))
                (when
                    (and
                     (< (point) (marker-position current-point))
                     (string= lang this-lang)
                     (src-block-in-session-p session))
                  (org-babel-execute-src-block arg)))
            ;; move forward so we can find the next block
            (forward-line)))))

    (defun org-babel-kill-session ()
      "Kill session for current code block."
      (interactive)
      (unless (org-in-src-block-p)
        (error "You must be in a src-block to run this command"))
      (save-window-excursion
        (org-babel-switch-to-session)
        (kill-buffer)))
#+END_SRC
***** remove results
#+BEGIN_SRC emacs-lisp
(defun org-babel-remove-result-buffer ()
  "Remove results from every code block in buffer."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward org-babel-src-block-regexp nil t)
      (org-babel-remove-result))))
#+END_SRC
***** keymap
#+BEGIN_SRC emacs-lisp
    (defvar org-babel-key-prefix (kbd "C-M-q"))
    (global-set-key (kbd "C-M-q") 'org-babel-map)
    (define-key org-babel-map (kbd "R") 'org-babel-restart-session-to-point)
    (define-key org-babel-map (kbd "w") 'org-babel-remove-result-buffer)
#+END_SRC
**** ipython
#+BEGIN_SRC emacs-lisp
(require 'ob-ipython)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((ipython . t)
   ;; other languages..
   ))

;; add provided completion backend for company 
(add-to-list 'company-backends 'company-ob-ipython) 

;; display inline images after eval
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)

;; for latex exports
;; (add-to-list 'org-latex-minted-langs '(ipython "python"))

;; to enable jupyter-console
(setq python-shell-completion-native-enable nil)

;; avoid warning messages to pop up

;; hack around json readtable error
;; (advice-add 'ob-ipython--collect-json :before
;;             (lambda (&rest args)
;;               (when (re-search-forward "{" nil t)
;;                 (backward-char))))

(require 'ox-ipynb)

(defun ox-ipynb-export()
  (interactive)
  (ox-ipynb-export-to-buffer)
  (save-buffer)
  (kill-buffer (buffer-name))
  )

;; To use the python lexer for ipython blocks, add this setting:

(add-to-list 'org-latex-minted-langs '(ipython "python"))
    
#+END_SRC
**** shell
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages '((shell . t)))
#+END_SRC
**** translate
#+BEGIN_SRC emacs-lisp
(fset 'translate-org-header-in-src-block
   [?\C-  ?\C-a C-right C-left ?\M-w ?\C-e return ?< ?t ?r tab ?\C-! ?\C-c ?\C-v ?\C-e])
(define-key teddd-map (kbd "t") 'ob-translate-org-header-in-src-block)
#+END_SRC
**** R
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((R . t)))
#+END_SRC
**** latex
#+BEGIN_SRC emacs-lisp
(setq org-latex-create-formula-image-program 'dvipng)
(org-babel-do-load-languages 'org-babel-load-languages '((latex . t)))
#+END_SRC
**** gnuplot
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((gnuplot . t)))
#+END_SRC

**** screen
#+BEGIN_SRC emacs-lisp
(require 'ob-screen)
(defvar org-babel-default-header-args:screen
'((:results . "silent") (:session . "default") (:cmd . "zsh") (:terminal . "st"))
"Default arguments to use when running screen source blocks.")
#+END_SRC
**** dot
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((dot . t))) ; this line activates dot
#+END_SRC
**** COMMENT jupyter 
:PROPERTIES:
:CREATED:  <2019-02-28 jeu. 17:44>
:END:
#+BEGIN_SRC emacs-lisp
;;(add-to-list 'load-path "~/.emacs.d/lisp/jupyter/")
(require 'jupyter)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((jupyter . t)))
#+END_SRC

*** Documentation
**** woman
#+BEGIN_SRC emacs-lisp
    (setq woman-use-topic-at-point t)
#+END_SRC
**** external doc
#+BEGIN_SRC emacs-lisp

(add-to-list 'Info-default-directory-list "~/code/info")

#+END_SRC

** Custom Use
*** COMMENT pdf
#+begin_src emacs-lisp
(pdf-loader-install)
#+end_src
*** doc-view
#+BEGIN_SRC emacs-lisp

    (add-hook 'doc-view-minor-mode-hook (lambda () (visible-mark-mode nil)))

#+END_SRC
*** images
#+BEGIN_SRC emacs-lisp
(auto-image-file-mode 1)
#+END_SRC
*** COMMENT org library mode
:PROPERTIES:
:CREATED:  <2019-01-13 dim. 19:36>
:END:
#+BEGIN_SRC emacs-lisp
(add-to-list 'image-type-file-name-regexps '("\\.pdf\\'" . imagemagick))
(add-to-list 'image-file-name-extensions "pdf")
(setq imagemagick-types-inhibit (remove 'PDF imagemagick-types-inhibit))
(setq org-image-actual-width 200)
#+END_SRC

*** COMMENT ledger mode
#+begin_src emacs-lisp
    ;; ledger mode for accounting
    (require 'ledger-mode)
    (autoload 'ledger-mode "ledger-mode" "A major mode for Ledger" t)
    (add-to-list 'load-path
                 (expand-file-name "~/.emacs.d/elpa/ledger-mode-3.1.1/"))
    (add-to-list 'auto-mode-alist '("\\.ledger$" . ledger-mode))
#+end_src
*** COMMENT gnus
*** COMMENT w3m
#+BEGIN_SRC emacs-lisp

(require 'w3m)

#+END_SRC
**** copy url
#+BEGIN_SRC emacs-lisp

    (defun w3m-url-to-kill-ring()
      (interactive)
      (kill-new (w3m-print-current-url))
      )

#+END_SRC
**** next url
#+BEGIN_SRC emacs-lisp

    (defun w3m-goto-next-url()
      (interactive)
      (w3m-goto-url w3m-next-url)
      )

    (defun w3m-goto-previous-url()
      (interactive)
      (w3m-goto-url w3m-previous-url)
      )

    (define-key w3m-mode-map (kbd ")") 'w3m-goto-next-url)
    (define-key w3m-mode-map (kbd "(") 'w3m-goto-previous-url)

#+END_SRC
*** elfeed
:PROPERTIES:
:CREATED:  <2019-01-13 dim. 22:34>
:END:
#+BEGIN_SRC emacs-lisp
(setq elfeed-feeds
      '("https://www.europeandataportal.eu/en/rss/articles.xml"
        "http://www.datatau.com/rss"
        "http://www.kdnuggets.com/feed"
        "https://dssg.uchicago.edu/feed"
        "http://blog.revolutionanalytics.com/atom.xml"
        "https://blog.mailchimp.com/tag/data-science/feed"
        "http://datascience.ibm.com/blog/rss"
        "http://blog.kaggle.com/category/data-science-news/feed"
        "https://blog.zhaw.ch/datascience/feed"
        "http://www.unofficialgoogledatascience.com/feeds/posts/default"
        "http://dataskeptic.com/feed.rss"
        "https://dataelixir.com/issues.rss"
        "http://www.polipsych.com/feed"
        ))
#+END_SRC

*** FoxDot
#+BEGIN_SRC emacs-lisp
(require 'foxdot-mode)

(defvar foxdot-cli-path "/home/teddd/.pyenv/versions/music/lib/python3.5/site-packages/FoxDot/")
#+END_SRC
*** latex
#+BEGIN_SRC emacs-lisp
(load "auctex.el" nil t t)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex) 
#+END_SRC

*** COMMENT grammalecte
:PROPERTIES:
:CREATED:  <2018-12-29 sam. 19:55>
:END:
#+BEGIN_SRC emacs-lisp
(require 'flycheck-grammalecte)
#+END_SRC

*** COMMENT Scimax
**** load path
#+BEGIN_SRC emacs-lisp
(let ((default-directory  "~/code/emacs/scimax/"))
  (normal-top-level-add-subdirs-to-load-path))
(setq scimax-dir "~/code/emacs/scimax/")
(add-to-list 'load-path "~/code/emacs/scimax/")

(require 'scimax-ob)
(require 'ox-ipynb)
(require 'ob-ipython)
(require 'scimax-org-babel-ipython-upstream)
#+END_SRC

*** Genius packages waiting
**** COMMENT code
    #+BEGIN_SRC emacs-lisp
    ;; cedet
    (load "~/code/emacs/cedet-dev/cedet-devel-load.el")
    ;; GOD MODE
    (global-set-key (kbd "<escape>") 'god-mode-all)
    (setq god-exempt-major-modes nil)
    (setq god-exempt-predicates nil)
    (defun my-update-cursor ()
      (setq cursor-type (if (or god-local-mode buffer-read-only)
                            'box
                          'bar)))
    (add-hook 'god-mode-enabled-hook 'my-update-cursor)
    (add-hook 'god-mode-disabled-hook 'my-update-cursor)

    ;;tern
    ;;(add-to-list 'load-path "~/.emacs.d/tern/")
    ;;(autoload 'tern-mode "tern.el" nil t)
    ;;(add-hook 'js2-mode-hook (lambda () (tern-mode t)))
#+END_SRC
**** icicles
***** COMMENT installation
#+BEGIN_SRC emacs-lisp
    ;; icicles
    (load "~/.emacs.d/elpa/icicles-install.el")
    #+END_SRC
***** enable
#+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/icicles")
    (require 'icicles)
#+END_SRC
**** bookmark+
#+BEGIN_SRC emacs-lisp

    (add-to-list 'load-path "~/.emacs.d/bookmark-plus/bookmark-plus")
    (require 'bookmark+)

#+END_SRC
**** COMMENT keats
#+BEGIN_SRC emacs-lisp

    (add-to-list 'load-path "~/.emacs.d/keats")
    (require 'keats)
    (require 'keats-interactive)

#+END_SRC
**** COMMENT cask
elisp package management
#+BEGIN_SRC emacs-lisp
(require 'cask "~/.cask/cask.el")
(cask-initialize)
#+END_SRC
*** COMMENT Computer Art
**** P5
#+begin_src emacs-lisp
    ;; P5 directory keybinding
    (defun find-p5-dir ()
      "Edit the `p5-dir', in another window."
      (interactive)
      (find-file "~/code/web/p5"))
    (global-set-key "\C-cp" 'find-p5-dir)
#+end_src
**** nyquist
#+begin_src emacs-lisp
    ;; nyquist
    (setq inferior-lisp-program "~/Musique/nyquist/ny")

#+end_src
** Projects
*** scroll package
:PROPERTIES:
:CREATED:  [2019-03-12 Tue 13:46]
:END:

== Scroll to move the cursor ==

Wouldn't it be nice if when pressing C- and scrolling, your cursor moved around as if you were pressing on the arrows but in a far more sensitive way ? The only code you need is :

    (define-key key-translation-map (kbd "<C-mouse-4>") (kbd "<up>"))
    (define-key key-translation-map (kbd "<C-mouse-5>") (kbd "<down>"))
    (global-set-key (kbd "<C-mouse-6>") 'left-char)
    (global-set-key (kbd "<C-mouse-7>") 'right-char)

With this config, you can even use it in term (terminal emulation) and enjoy new ways of navigating within commands like less, man or visidata. 

**** Add to hands off
:PROPERTIES:
:CREATED:  [2019-03-14 Thu 07:50]
:END:


